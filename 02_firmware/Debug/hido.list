
hido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006870  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800697c  0800697c  0001697c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069f0  080069f0  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  080069f0  080069f0  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069f0  080069f0  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080069f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000164  08006b5c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08006b5c  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea0  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036ce  00000000  00000000  0003702d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  0003a700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003b9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000123ee  00000000  00000000  0003cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011920  00000000  00000000  0004eec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005d7b9  00000000  00000000  000607e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdf9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  000be01c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08006964 	.word	0x08006964

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08006964 	.word	0x08006964

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	f107 031c 	add.w	r3, r7, #28
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800015e:	463b      	mov	r3, r7
 8000160:	2200      	movs	r2, #0
 8000162:	601a      	str	r2, [r3, #0]
 8000164:	605a      	str	r2, [r3, #4]
 8000166:	609a      	str	r2, [r3, #8]
 8000168:	60da      	str	r2, [r3, #12]
 800016a:	611a      	str	r2, [r3, #16]
 800016c:	615a      	str	r2, [r3, #20]
 800016e:	619a      	str	r2, [r3, #24]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000170:	4b3c      	ldr	r3, [pc, #240]	; (8000264 <MX_ADC1_Init+0x118>)
 8000172:	4a3d      	ldr	r2, [pc, #244]	; (8000268 <MX_ADC1_Init+0x11c>)
 8000174:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000176:	4b3b      	ldr	r3, [pc, #236]	; (8000264 <MX_ADC1_Init+0x118>)
 8000178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800017c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017e:	4b39      	ldr	r3, [pc, #228]	; (8000264 <MX_ADC1_Init+0x118>)
 8000180:	2200      	movs	r2, #0
 8000182:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000184:	4b37      	ldr	r3, [pc, #220]	; (8000264 <MX_ADC1_Init+0x118>)
 8000186:	2200      	movs	r2, #0
 8000188:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800018a:	4b36      	ldr	r3, [pc, #216]	; (8000264 <MX_ADC1_Init+0x118>)
 800018c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000192:	4b34      	ldr	r3, [pc, #208]	; (8000264 <MX_ADC1_Init+0x118>)
 8000194:	2200      	movs	r2, #0
 8000196:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000198:	4b32      	ldr	r3, [pc, #200]	; (8000264 <MX_ADC1_Init+0x118>)
 800019a:	2201      	movs	r2, #1
 800019c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019e:	4831      	ldr	r0, [pc, #196]	; (8000264 <MX_ADC1_Init+0x118>)
 80001a0:	f000 fce4 	bl	8000b6c <HAL_ADC_Init>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d001      	beq.n	80001ae <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80001aa:	f000 f9fd 	bl	80005a8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80001ae:	2310      	movs	r3, #16
 80001b0:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001b2:	2301      	movs	r3, #1
 80001b4:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001b6:	2307      	movs	r3, #7
 80001b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001ba:	f107 031c 	add.w	r3, r7, #28
 80001be:	4619      	mov	r1, r3
 80001c0:	4828      	ldr	r0, [pc, #160]	; (8000264 <MX_ADC1_Init+0x118>)
 80001c2:	f000 fe81 	bl	8000ec8 <HAL_ADC_ConfigChannel>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 80001cc:	f000 f9ec 	bl	80005a8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80001d0:	2308      	movs	r3, #8
 80001d2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80001d4:	2301      	movs	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80001d8:	2304      	movs	r3, #4
 80001da:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001dc:	2300      	movs	r3, #0
 80001de:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T2_TRGO;
 80001e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001e4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80001e6:	2300      	movs	r3, #0
 80001e8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80001f2:	463b      	mov	r3, r7
 80001f4:	4619      	mov	r1, r3
 80001f6:	481b      	ldr	r0, [pc, #108]	; (8000264 <MX_ADC1_Init+0x118>)
 80001f8:	f000 ffa2 	bl	8001140 <HAL_ADCEx_InjectedConfigChannel>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000202:	f000 f9d1 	bl	80005a8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8000206:	2309      	movs	r3, #9
 8000208:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800020a:	2302      	movs	r3, #2
 800020c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800020e:	463b      	mov	r3, r7
 8000210:	4619      	mov	r1, r3
 8000212:	4814      	ldr	r0, [pc, #80]	; (8000264 <MX_ADC1_Init+0x118>)
 8000214:	f000 ff94 	bl	8001140 <HAL_ADCEx_InjectedConfigChannel>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800021e:	f000 f9c3 	bl	80005a8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000222:	230c      	movs	r3, #12
 8000224:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000226:	2303      	movs	r3, #3
 8000228:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800022a:	463b      	mov	r3, r7
 800022c:	4619      	mov	r1, r3
 800022e:	480d      	ldr	r0, [pc, #52]	; (8000264 <MX_ADC1_Init+0x118>)
 8000230:	f000 ff86 	bl	8001140 <HAL_ADCEx_InjectedConfigChannel>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800023a:	f000 f9b5 	bl	80005a8 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800023e:	230d      	movs	r3, #13
 8000240:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000242:	2304      	movs	r3, #4
 8000244:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000246:	463b      	mov	r3, r7
 8000248:	4619      	mov	r1, r3
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <MX_ADC1_Init+0x118>)
 800024c:	f000 ff78 	bl	8001140 <HAL_ADCEx_InjectedConfigChannel>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000256:	f000 f9a7 	bl	80005a8 <Error_Handler>
  }

}
 800025a:	bf00      	nop
 800025c:	3728      	adds	r7, #40	; 0x28
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	2000019c 	.word	0x2000019c
 8000268:	40012400 	.word	0x40012400

0800026c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b08a      	sub	sp, #40	; 0x28
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a23      	ldr	r2, [pc, #140]	; (8000314 <HAL_ADC_MspInit+0xa8>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d13f      	bne.n	800030c <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <HAL_ADC_MspInit+0xac>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a21      	ldr	r2, [pc, #132]	; (8000318 <HAL_ADC_MspInit+0xac>)
 8000292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <HAL_ADC_MspInit+0xac>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	4b1c      	ldr	r3, [pc, #112]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a1b      	ldr	r2, [pc, #108]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b19      	ldr	r3, [pc, #100]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	613b      	str	r3, [r7, #16]
 80002ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002c2:	f043 0308 	orr.w	r3, r3, #8
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <HAL_ADC_MspInit+0xac>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0308 	and.w	r3, r3, #8
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80002d4:	230c      	movs	r3, #12
 80002d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002d8:	2303      	movs	r3, #3
 80002da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4619      	mov	r1, r3
 80002e2:	480e      	ldr	r0, [pc, #56]	; (800031c <HAL_ADC_MspInit+0xb0>)
 80002e4:	f001 f9d0 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002ec:	2303      	movs	r3, #3
 80002ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f0:	f107 0318 	add.w	r3, r7, #24
 80002f4:	4619      	mov	r1, r3
 80002f6:	480a      	ldr	r0, [pc, #40]	; (8000320 <HAL_ADC_MspInit+0xb4>)
 80002f8:	f001 f9c6 	bl	8001688 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2100      	movs	r1, #0
 8000300:	2012      	movs	r0, #18
 8000302:	f001 f98a 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000306:	2012      	movs	r0, #18
 8000308:	f001 f9a3 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800030c:	bf00      	nop
 800030e:	3728      	adds	r7, #40	; 0x28
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40012400 	.word	0x40012400
 8000318:	40021000 	.word	0x40021000
 800031c:	40011000 	.word	0x40011000
 8000320:	40010c00 	.word	0x40010c00

08000324 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	4b50      	ldr	r3, [pc, #320]	; (800047c <MX_GPIO_Init+0x158>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a4f      	ldr	r2, [pc, #316]	; (800047c <MX_GPIO_Init+0x158>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b4d      	ldr	r3, [pc, #308]	; (800047c <MX_GPIO_Init+0x158>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000350:	4b4a      	ldr	r3, [pc, #296]	; (800047c <MX_GPIO_Init+0x158>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a49      	ldr	r2, [pc, #292]	; (800047c <MX_GPIO_Init+0x158>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b47      	ldr	r3, [pc, #284]	; (800047c <MX_GPIO_Init+0x158>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b44      	ldr	r3, [pc, #272]	; (800047c <MX_GPIO_Init+0x158>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a43      	ldr	r2, [pc, #268]	; (800047c <MX_GPIO_Init+0x158>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b41      	ldr	r3, [pc, #260]	; (800047c <MX_GPIO_Init+0x158>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b3e      	ldr	r3, [pc, #248]	; (800047c <MX_GPIO_Init+0x158>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a3d      	ldr	r2, [pc, #244]	; (800047c <MX_GPIO_Init+0x158>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b3b      	ldr	r3, [pc, #236]	; (800047c <MX_GPIO_Init+0x158>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f641 4110 	movw	r1, #7184	; 0x1c10
 800039e:	4838      	ldr	r0, [pc, #224]	; (8000480 <MX_GPIO_Init+0x15c>)
 80003a0:	f001 fac4 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4836      	ldr	r0, [pc, #216]	; (8000484 <MX_GPIO_Init+0x160>)
 80003ac:	f001 fabe 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2104      	movs	r1, #4
 80003b4:	4834      	ldr	r0, [pc, #208]	; (8000488 <MX_GPIO_Init+0x164>)
 80003b6:	f001 fab9 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC5 PC6 PC7 
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80003ba:	f24e 33e3 	movw	r3, #58339	; 0xe3e3
 80003be:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	482c      	ldr	r0, [pc, #176]	; (8000480 <MX_GPIO_Init+0x15c>)
 80003d0:	f001 f95a 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80003d4:	2330      	movs	r3, #48	; 0x30
 80003d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d8:	2303      	movs	r3, #3
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	4828      	ldr	r0, [pc, #160]	; (8000484 <MX_GPIO_Init+0x160>)
 80003e4:	f001 f950 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80003e8:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4821      	ldr	r0, [pc, #132]	; (8000484 <MX_GPIO_Init+0x160>)
 80003fe:	f001 f943 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LED1_Pin|LED2_Pin|LED3_Pin;
 8000402:	f641 4310 	movw	r3, #7184	; 0x1c10
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4819      	ldr	r0, [pc, #100]	; (8000480 <MX_GPIO_Init+0x15c>)
 800041c:	f001 f934 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12 
                           PB13 PB14 PB15 PB3 
                           PB4 PB5 PB6 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
 8000420:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000424:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4815      	ldr	r0, [pc, #84]	; (800048c <MX_GPIO_Init+0x168>)
 8000436:	f001 f927 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800043a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800043e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000440:	2301      	movs	r3, #1
 8000442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	2300      	movs	r3, #0
 8000446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480c      	ldr	r0, [pc, #48]	; (8000484 <MX_GPIO_Init+0x160>)
 8000454:	f001 f918 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000458:	2304      	movs	r3, #4
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_GPIO_Init+0x164>)
 8000470:	f001 f90a 	bl	8001688 <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	40011000 	.word	0x40011000
 8000484:	40010800 	.word	0x40010800
 8000488:	40011400 	.word	0x40011400
 800048c:	40010c00 	.word	0x40010c00

08000490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fae6 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f828 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f7ff ff42 	bl	8000324 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004a0:	f005 fe88 	bl	80061b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004a4:	f7ff fe52 	bl	800014c <MX_ADC1_Init>
  MX_TIM2_Init();
 80004a8:	f000 f928 	bl	80006fc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004ac:	f000 f9dc 	bl	8000868 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004b0:	f000 fa04 	bl	80008bc <MX_USART2_UART_Init>
	//  HAL_Delay(100);
	//  HAL_GPIO_TogglePin(GPIOC, LED1_Pin);
	//HAL_Delay(500);
	//GetPointerData(HID_Buffer);
	//USBD_HID_SendReport(&USBD_Device, HID_Buffer, 4);
  click_report[0] = 1; // send button press
 80004b4:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <main+0x54>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	701a      	strb	r2, [r3, #0]
  USBD_HID_SendReport(&hUsbDeviceFS, click_report, CLICK_REPORT_SIZE);
 80004ba:	2204      	movs	r2, #4
 80004bc:	4909      	ldr	r1, [pc, #36]	; (80004e4 <main+0x54>)
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <main+0x58>)
 80004c0:	f004 fd96 	bl	8004ff0 <USBD_HID_SendReport>
  HAL_Delay(50);
 80004c4:	2032      	movs	r0, #50	; 0x32
 80004c6:	f000 fb2f 	bl	8000b28 <HAL_Delay>

  click_report[0] = 0; // send button release
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <main+0x54>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
  USBD_HID_SendReport(&hUsbDeviceFS, click_report, CLICK_REPORT_SIZE);
 80004d0:	2204      	movs	r2, #4
 80004d2:	4904      	ldr	r1, [pc, #16]	; (80004e4 <main+0x54>)
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <main+0x58>)
 80004d6:	f004 fd8b 	bl	8004ff0 <USBD_HID_SendReport>

  HAL_Delay(200);
 80004da:	20c8      	movs	r0, #200	; 0xc8
 80004dc:	f000 fb24 	bl	8000b28 <HAL_Delay>
  click_report[0] = 1; // send button press
 80004e0:	e7e8      	b.n	80004b4 <main+0x24>
 80004e2:	bf00      	nop
 80004e4:	20000180 	.word	0x20000180
 80004e8:	20000290 	.word	0x20000290

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f6:	2228      	movs	r2, #40	; 0x28
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f006 fa2a 	bl	8006954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051c:	2301      	movs	r3, #1
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000524:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000538:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800053c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000542:	4618      	mov	r0, r3
 8000544:	f002 f8d8 	bl	80026f8 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800054e:	f000 f82b 	bl	80005a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	230f      	movs	r3, #15
 8000554:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000562:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fb42 	bl	8002bf8 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800057a:	f000 f815 	bl	80005a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800057e:	2312      	movs	r3, #18
 8000580:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000586:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f002 fccd 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800059c:	f000 f804 	bl	80005a8 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3750      	adds	r7, #80	; 0x50
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <HardFault_Handler+0x4>

0800062a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <MemManage_Handler+0x4>

08000630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <BusFault_Handler+0x4>

08000636 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <UsageFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000664:	f000 fa44 	bl	8000af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <ADC1_IRQHandler+0x10>)
 8000672:	f000 fb53 	bl	8000d1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000019c 	.word	0x2000019c

08000680 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <USB_LP_IRQHandler+0x10>)
 8000686:	f001 fa70 	bl	8001b6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000754 	.word	0x20000754

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x5c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x5c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x5c>)
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	4911      	ldr	r1, [pc, #68]	; (80006f0 <SystemInit+0x5c>)
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <SystemInit+0x60>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x5c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <SystemInit+0x5c>)
 80006b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <SystemInit+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <SystemInit+0x5c>)
 80006c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <SystemInit+0x5c>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <SystemInit+0x5c>)
 80006d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <SystemInit+0x5c>)
 80006da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006de:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SystemInit+0x64>)
 80006e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e6:	609a      	str	r2, [r3, #8]
#endif 
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	40021000 	.word	0x40021000
 80006f4:	f8ff0000 	.word	0xf8ff0000
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8000726:	4b31      	ldr	r3, [pc, #196]	; (80007ec <MX_TIM2_Init+0xf0>)
 8000728:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800072e:	4b2f      	ldr	r3, [pc, #188]	; (80007ec <MX_TIM2_Init+0xf0>)
 8000730:	2200      	movs	r2, #0
 8000732:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000734:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <MX_TIM2_Init+0xf0>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 48000;
 800073a:	4b2c      	ldr	r3, [pc, #176]	; (80007ec <MX_TIM2_Init+0xf0>)
 800073c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000740:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000742:	4b2a      	ldr	r3, [pc, #168]	; (80007ec <MX_TIM2_Init+0xf0>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <MX_TIM2_Init+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800074e:	4827      	ldr	r0, [pc, #156]	; (80007ec <MX_TIM2_Init+0xf0>)
 8000750:	f002 fca4 	bl	800309c <HAL_TIM_Base_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800075a:	f7ff ff25 	bl	80005a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4619      	mov	r1, r3
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <MX_TIM2_Init+0xf0>)
 800076c:	f002 fd91 	bl	8003292 <HAL_TIM_ConfigClockSource>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000776:	f7ff ff17 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_TIM2_Init+0xf0>)
 800077c:	f002 fcb9 	bl	80030f2 <HAL_TIM_IC_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000786:	f7ff ff0f 	bl	80005a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800078a:	2320      	movs	r3, #32
 800078c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <MX_TIM2_Init+0xf0>)
 800079a:	f003 f81e 	bl	80037da <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80007a4:	f7ff ff00 	bl	80005a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007a8:	2300      	movs	r3, #0
 80007aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	4619      	mov	r1, r3
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_TIM2_Init+0xf0>)
 80007c0:	f002 fccb 	bl	800315a <HAL_TIM_IC_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80007ca:	f7ff feed 	bl	80005a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2204      	movs	r2, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM2_Init+0xf0>)
 80007d6:	f002 fcc0 	bl	800315a <HAL_TIM_IC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80007e0:	f7ff fee2 	bl	80005a8 <Error_Handler>
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200001cc 	.word	0x200001cc

080007f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800080e:	d123      	bne.n	8000858 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 8000812:	69db      	ldr	r3, [r3, #28]
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	61d3      	str	r3, [r2, #28]
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_TIM_Base_MspInit+0x70>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000840:	2303      	movs	r3, #3
 8000842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <HAL_TIM_Base_MspInit+0x74>)
 8000854:	f000 ff18 	bl	8001688 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	40010800 	.word	0x40010800

08000868 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART1_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART1_UART_Init+0x4c>)
 80008a0:	f002 ffdf 	bl	8003862 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f7ff fe7d 	bl	80005a8 <Error_Handler>
  }

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000020c 	.word	0x2000020c
 80008b8:	40013800 	.word	0x40013800

080008bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_USART2_UART_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008e2:	220c      	movs	r2, #12
 80008e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_USART2_UART_Init+0x4c>)
 80008f4:	f002 ffb5 	bl	8003862 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008fe:	f7ff fe53 	bl	80005a8 <Error_Handler>
  }

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000024c 	.word	0x2000024c
 800090c:	40004400 	.word	0x40004400

08000910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <HAL_UART_MspInit+0xf8>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d132      	bne.n	8000996 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000930:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b30      	ldr	r3, [pc, #192]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096a:	2303      	movs	r3, #3
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4619      	mov	r1, r3
 8000974:	4826      	ldr	r0, [pc, #152]	; (8000a10 <HAL_UART_MspInit+0x100>)
 8000976:	f000 fe87 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4619      	mov	r1, r3
 800098e:	4820      	ldr	r0, [pc, #128]	; (8000a10 <HAL_UART_MspInit+0x100>)
 8000990:	f000 fe7a 	bl	8001688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000994:	e034      	b.n	8000a00 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <HAL_UART_MspInit+0x104>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d12f      	bne.n	8000a00 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_UART_MspInit+0xfc>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0304 	and.w	r3, r3, #4
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009d0:	2304      	movs	r3, #4
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	4619      	mov	r1, r3
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_UART_MspInit+0x100>)
 80009e4:	f000 fe50 	bl	8001688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009e8:	2308      	movs	r3, #8
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_UART_MspInit+0x100>)
 80009fc:	f000 fe44 	bl	8001688 <HAL_GPIO_Init>
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40013800 	.word	0x40013800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010800 	.word	0x40010800
 8000a14:	40004400 	.word	0x40004400

08000a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a18:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a1a:	e003      	b.n	8000a24 <LoopCopyDataInit>

08000a1c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a1e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a20:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a22:	3104      	adds	r1, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a28:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a2a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a2c:	d3f6      	bcc.n	8000a1c <CopyDataInit>
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a30:	e002      	b.n	8000a38 <LoopFillZerobss>

08000a32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a34:	f842 3b04 	str.w	r3, [r2], #4

08000a38 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a3c:	d3f9      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a3e:	f7ff fe29 	bl	8000694 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f005 ff63 	bl	800690c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fd23 	bl	8000490 <main>
  bx lr
 8000a4a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a4c:	080069f8 	.word	0x080069f8
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a54:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8000a58:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 8000a5c:	200009c0 	.word	0x200009c0

08000a60 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <DMA1_Channel1_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <HAL_Init+0x28>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_Init+0x28>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 fdc5 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f808 	bl	8000a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fd98 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40022000 	.word	0x40022000

08000a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x54>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x58>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fddd 	bl	800166e <HAL_SYSTICK_Config>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00e      	b.n	8000adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d80a      	bhi.n	8000ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 fda5 	bl	800161a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_InitTick+0x5c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000004 	.word	0x20000004

08000af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_IncTick+0x1c>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x20>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <HAL_IncTick+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	2000028c 	.word	0x2000028c

08000b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <HAL_GetTick+0x10>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	2000028c 	.word	0x2000028c

08000b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fff0 	bl	8000b14 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_Delay+0x40>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffe0 	bl	8000b14 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
  {
  }
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0be      	b.n	8000d0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff fb5e 	bl	800026c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f000 fa81 	bl	80010b8 <ADC_ConversionStop_Disable>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8099 	bne.w	8000cfa <HAL_ADC_Init+0x18e>
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8095 	bne.w	8000cfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bd8:	f023 0302 	bic.w	r3, r3, #2
 8000bdc:	f043 0202 	orr.w	r2, r3, #2
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7b1b      	ldrb	r3, [r3, #12]
 8000bf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d003      	beq.n	8000c0e <HAL_ADC_Init+0xa2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d102      	bne.n	8000c14 <HAL_ADC_Init+0xa8>
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	e000      	b.n	8000c16 <HAL_ADC_Init+0xaa>
 8000c14:	2300      	movs	r3, #0
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	7d1b      	ldrb	r3, [r3, #20]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d119      	bne.n	8000c58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	7b1b      	ldrb	r3, [r3, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d109      	bne.n	8000c40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	035a      	lsls	r2, r3, #13
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	e00b      	b.n	8000c58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f043 0220 	orr.w	r2, r3, #32
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c50:	f043 0201 	orr.w	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <HAL_ADC_Init+0x1a8>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	68b9      	ldr	r1, [r7, #8]
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c88:	d003      	beq.n	8000c92 <HAL_ADC_Init+0x126>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d104      	bne.n	8000c9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	051b      	lsls	r3, r3, #20
 8000c9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_ADC_Init+0x1ac>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cca:	f023 0303 	bic.w	r3, r3, #3
 8000cce:	f043 0201 	orr.w	r2, r3, #1
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cd6:	e018      	b.n	8000d0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f023 0312 	bic.w	r3, r3, #18
 8000ce0:	f043 0210 	orr.w	r2, r3, #16
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cec:	f043 0201 	orr.w	r2, r3, #1
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cf8:	e007      	b.n	8000d0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f043 0210 	orr.w	r2, r3, #16
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	ffe1f7fd 	.word	0xffe1f7fd
 8000d18:	ff1f0efe 	.word	0xff1f0efe

08000d1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	2b20      	cmp	r3, #32
 8000d30:	d140      	bne.n	8000db4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d139      	bne.n	8000db4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d66:	d11d      	bne.n	8000da4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d119      	bne.n	8000da4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0220 	bic.w	r2, r2, #32
 8000d7e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f87c 	bl	8000ea2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f06f 0212 	mvn.w	r2, #18
 8000db2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dbe:	2b80      	cmp	r3, #128	; 0x80
 8000dc0:	d14f      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d148      	bne.n	8000e62 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000df2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000df6:	d012      	beq.n	8000e1e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d125      	bne.n	8000e52 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e14:	d11d      	bne.n	8000e52 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d119      	bne.n	8000e52 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e2c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d105      	bne.n	8000e52 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f96a 	bl	800112c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f06f 020c 	mvn.w	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e6c:	2b40      	cmp	r3, #64	; 0x40
 8000e6e:	d114      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d10d      	bne.n	8000e9a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f812 	bl	8000eb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f06f 0201 	mvn.w	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
	...

08000ec8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x20>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e0dc      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x1da>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b06      	cmp	r3, #6
 8000ef6:	d81c      	bhi.n	8000f32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	4613      	mov	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	4413      	add	r3, r2
 8000f08:	3b05      	subs	r3, #5
 8000f0a:	221f      	movs	r2, #31
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	4019      	ands	r1, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	3b05      	subs	r3, #5
 8000f24:	fa00 f203 	lsl.w	r2, r0, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000f30:	e03c      	b.n	8000fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b0c      	cmp	r3, #12
 8000f38:	d81c      	bhi.n	8000f74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b23      	subs	r3, #35	; 0x23
 8000f4c:	221f      	movs	r2, #31
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	4019      	ands	r1, r3
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b23      	subs	r3, #35	; 0x23
 8000f66:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
 8000f72:	e01b      	b.n	8000fac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	3b41      	subs	r3, #65	; 0x41
 8000f86:	221f      	movs	r2, #31
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3b41      	subs	r3, #65	; 0x41
 8000fa0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b09      	cmp	r3, #9
 8000fb2:	d91c      	bls.n	8000fee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	68d9      	ldr	r1, [r3, #12]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b1e      	subs	r3, #30
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4019      	ands	r1, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	6898      	ldr	r0, [r3, #8]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	e019      	b.n	8001022 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6919      	ldr	r1, [r3, #16]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	2207      	movs	r2, #7
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	4019      	ands	r1, r3
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6898      	ldr	r0, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	fa00 f203 	lsl.w	r2, r0, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b10      	cmp	r3, #16
 8001028:	d003      	beq.n	8001032 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800102e:	2b11      	cmp	r3, #17
 8001030:	d132      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_ADC_ConfigChannel+0x1e4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d125      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d126      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001058:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b10      	cmp	r3, #16
 8001060:	d11a      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	0c9a      	lsrs	r2, r3, #18
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001078:	e002      	b.n	8001080 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	3b01      	subs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f9      	bne.n	800107a <HAL_ADC_ConfigChannel+0x1b2>
 8001086:	e007      	b.n	8001098 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	f043 0220 	orr.w	r2, r3, #32
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40012400 	.word	0x40012400
 80010b0:	20000000 	.word	0x20000000
 80010b4:	431bde83 	.word	0x431bde83

080010b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d127      	bne.n	8001122 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010e2:	f7ff fd17 	bl	8000b14 <HAL_GetTick>
 80010e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010e8:	e014      	b.n	8001114 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ea:	f7ff fd13 	bl	8000b14 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d90d      	bls.n	8001114 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	f043 0210 	orr.w	r2, r3, #16
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	f043 0201 	orr.w	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e007      	b.n	8001124 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d0e3      	beq.n	80010ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001140:	b490      	push	{r4, r7}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_ADCEx_InjectedConfigChannel+0x20>
 800115c:	2302      	movs	r3, #2
 800115e:	e17a      	b.n	8001456 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d119      	bne.n	80011a4 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d10c      	bne.n	8001192 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117e:	0d9b      	lsrs	r3, r3, #22
 8001180:	059b      	lsls	r3, r3, #22
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	6812      	ldr	r2, [r2, #0]
 8001186:	03d1      	lsls	r1, r2, #15
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	6812      	ldr	r2, [r2, #0]
 800118c:	430b      	orrs	r3, r1
 800118e:	6393      	str	r3, [r2, #56]	; 0x38
 8001190:	e04f      	b.n	8001232 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f043 0220 	orr.w	r2, r3, #32
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e046      	b.n	8001232 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d82a      	bhi.n	8001206 <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	330f      	adds	r3, #15
 80011c8:	221f      	movs	r2, #31
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4019      	ands	r1, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	3b01      	subs	r3, #1
 80011dc:	0518      	lsls	r0, r3, #20
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681c      	ldr	r4, [r3, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	330f      	adds	r3, #15
 80011f4:	fa04 f303 	lsl.w	r3, r4, r3
 80011f8:	ea40 0203 	orr.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	e015      	b.n	8001232 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	330f      	adds	r3, #15
 800121e:	221f      	movs	r2, #31
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b01      	cmp	r3, #1
 800123e:	d00c      	beq.n	800125a <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	6991      	ldr	r1, [r2, #24]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	430b      	orrs	r3, r1
 8001258:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	7d5b      	ldrb	r3, [r3, #21]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d115      	bne.n	800128e <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800126a:	d108      	bne.n	800127e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	e007      	b.n	800128e <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001282:	f043 0220 	orr.w	r2, r3, #32
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	7d1b      	ldrb	r3, [r3, #20]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d114      	bne.n	80012c0 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	7d5b      	ldrb	r3, [r3, #21]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	e007      	b.n	80012c0 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	f043 0220 	orr.w	r2, r3, #32
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b09      	cmp	r3, #9
 80012c6:	d91c      	bls.n	8001302 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68d9      	ldr	r1, [r3, #12]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	3b1e      	subs	r3, #30
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4019      	ands	r1, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	6898      	ldr	r0, [r3, #8]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	e019      	b.n	8001336 <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6919      	ldr	r1, [r3, #16]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	fa00 f203 	lsl.w	r2, r0, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b10      	cmp	r3, #16
 800133c:	d003      	beq.n	8001346 <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001342:	2b11      	cmp	r3, #17
 8001344:	d107      	bne.n	8001356 <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001354:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d011      	beq.n	8001382 <HAL_ADCEx_InjectedConfigChannel+0x242>
 800135e:	2b03      	cmp	r3, #3
 8001360:	d01d      	beq.n	800139e <HAL_ADCEx_InjectedConfigChannel+0x25e>
 8001362:	2b01      	cmp	r3, #1
 8001364:	d129      	bne.n	80013ba <HAL_ADCEx_InjectedConfigChannel+0x27a>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	68d1      	ldr	r1, [r2, #12]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	430b      	orrs	r3, r1
 800137e:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8001380:	e029      	b.n	80013d6 <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	68d1      	ldr	r1, [r2, #12]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	430b      	orrs	r3, r1
 800139a:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800139c:	e01b      	b.n	80013d6 <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80013a8:	f023 030f 	bic.w	r3, r3, #15
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	68d1      	ldr	r1, [r2, #12]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	430b      	orrs	r3, r1
 80013b6:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80013b8:	e00d      	b.n	80013d6 <HAL_ADCEx_InjectedConfigChannel+0x296>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80013c4:	f023 030f 	bic.w	r3, r3, #15
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	68d1      	ldr	r1, [r2, #12]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	430b      	orrs	r3, r1
 80013d2:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80013d4:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d003      	beq.n	80013e6 <HAL_ADCEx_InjectedConfigChannel+0x2a6>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80013e2:	2b11      	cmp	r3, #17
 80013e4:	d132      	bne.n	800144c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d125      	bne.n	800143c <HAL_ADCEx_InjectedConfigChannel+0x2fc>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d126      	bne.n	800144c <HAL_ADCEx_InjectedConfigChannel+0x30c>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800140c:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b10      	cmp	r3, #16
 8001414:	d11a      	bne.n	800144c <HAL_ADCEx_InjectedConfigChannel+0x30c>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9a      	lsrs	r2, r3, #18
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142c:	e002      	b.n	8001434 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
          {
            wait_loop_index--;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADCEx_InjectedConfigChannel+0x2ee>
 800143a:	e007      	b.n	800144c <HAL_ADCEx_InjectedConfigChannel+0x30c>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f043 0220 	orr.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bc90      	pop	{r4, r7}
 800145e:	4770      	bx	lr
 8001460:	40012400 	.word	0x40012400
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	db0b      	blt.n	80014fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	f003 021f 	and.w	r2, r3, #31
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <__NVIC_EnableIRQ+0x34>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	2001      	movs	r0, #1
 80014f2:	fa00 f202 	lsl.w	r2, r0, r2
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff90 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff2d 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800162c:	f7ff ff42 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 8001630:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	6978      	ldr	r0, [r7, #20]
 8001638:	f7ff ff90 	bl	800155c <NVIC_EncodePriority>
 800163c:	4602      	mov	r2, r0
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff5f 	bl	8001508 <__NVIC_SetPriority>
}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff35 	bl	80014d0 <__NVIC_EnableIRQ>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffa2 	bl	80015c0 <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b08b      	sub	sp, #44	; 0x2c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001696:	2300      	movs	r3, #0
 8001698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800169a:	e121      	b.n	80018e0 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800169c:	2201      	movs	r2, #1
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	f040 8110 	bne.w	80018da <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d034      	beq.n	800172c <HAL_GPIO_Init+0xa4>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d80d      	bhi.n	80016e2 <HAL_GPIO_Init+0x5a>
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x9a>
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d804      	bhi.n	80016d8 <HAL_GPIO_Init+0x50>
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d031      	beq.n	8001736 <HAL_GPIO_Init+0xae>
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d01c      	beq.n	8001710 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016d6:	e048      	b.n	800176a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d043      	beq.n	8001764 <HAL_GPIO_Init+0xdc>
 80016dc:	2b11      	cmp	r3, #17
 80016de:	d01b      	beq.n	8001718 <HAL_GPIO_Init+0x90>
          break;
 80016e0:	e043      	b.n	800176a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016e2:	4a86      	ldr	r2, [pc, #536]	; (80018fc <HAL_GPIO_Init+0x274>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d026      	beq.n	8001736 <HAL_GPIO_Init+0xae>
 80016e8:	4a84      	ldr	r2, [pc, #528]	; (80018fc <HAL_GPIO_Init+0x274>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d806      	bhi.n	80016fc <HAL_GPIO_Init+0x74>
 80016ee:	4a84      	ldr	r2, [pc, #528]	; (8001900 <HAL_GPIO_Init+0x278>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d020      	beq.n	8001736 <HAL_GPIO_Init+0xae>
 80016f4:	4a83      	ldr	r2, [pc, #524]	; (8001904 <HAL_GPIO_Init+0x27c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d01d      	beq.n	8001736 <HAL_GPIO_Init+0xae>
          break;
 80016fa:	e036      	b.n	800176a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016fc:	4a82      	ldr	r2, [pc, #520]	; (8001908 <HAL_GPIO_Init+0x280>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d019      	beq.n	8001736 <HAL_GPIO_Init+0xae>
 8001702:	4a82      	ldr	r2, [pc, #520]	; (800190c <HAL_GPIO_Init+0x284>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d016      	beq.n	8001736 <HAL_GPIO_Init+0xae>
 8001708:	4a81      	ldr	r2, [pc, #516]	; (8001910 <HAL_GPIO_Init+0x288>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d013      	beq.n	8001736 <HAL_GPIO_Init+0xae>
          break;
 800170e:	e02c      	b.n	800176a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e028      	b.n	800176a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	3304      	adds	r3, #4
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e023      	b.n	800176a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	3308      	adds	r3, #8
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e01e      	b.n	800176a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	330c      	adds	r3, #12
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e019      	b.n	800176a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d102      	bne.n	8001744 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173e:	2304      	movs	r3, #4
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e012      	b.n	800176a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800174c:	2308      	movs	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	611a      	str	r2, [r3, #16]
          break;
 8001756:	e008      	b.n	800176a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	615a      	str	r2, [r3, #20]
          break;
 8001762:	e002      	b.n	800176a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
          break;
 8001768:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2bff      	cmp	r3, #255	; 0xff
 800176e:	d801      	bhi.n	8001774 <HAL_GPIO_Init+0xec>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	e001      	b.n	8001778 <HAL_GPIO_Init+0xf0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3304      	adds	r3, #4
 8001778:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2bff      	cmp	r3, #255	; 0xff
 800177e:	d802      	bhi.n	8001786 <HAL_GPIO_Init+0xfe>
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x104>
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	3b08      	subs	r3, #8
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	210f      	movs	r1, #15
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	401a      	ands	r2, r3
 800179e:	6a39      	ldr	r1, [r7, #32]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	431a      	orrs	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 8090 	beq.w	80018da <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ba:	4b56      	ldr	r3, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x28c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	4a55      	ldr	r2, [pc, #340]	; (8001914 <HAL_GPIO_Init+0x28c>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6193      	str	r3, [r2, #24]
 80017c6:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_GPIO_Init+0x28c>)
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d2:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_GPIO_Init+0x290>)
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <HAL_GPIO_Init+0x294>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x192>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a47      	ldr	r2, [pc, #284]	; (8001920 <HAL_GPIO_Init+0x298>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x18e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a46      	ldr	r2, [pc, #280]	; (8001924 <HAL_GPIO_Init+0x29c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x18a>
 800180e:	2302      	movs	r3, #2
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x194>
 8001812:	2303      	movs	r3, #3
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x194>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x194>
 800181a:	2300      	movs	r3, #0
 800181c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800182c:	493a      	ldr	r1, [pc, #232]	; (8001918 <HAL_GPIO_Init+0x290>)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001846:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4937      	ldr	r1, [pc, #220]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001854:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	43db      	mvns	r3, r3
 800185c:	4932      	ldr	r1, [pc, #200]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 800185e:	4013      	ands	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	492d      	ldr	r1, [pc, #180]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	43db      	mvns	r3, r3
 8001884:	4928      	ldr	r1, [pc, #160]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001886:	4013      	ands	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d006      	beq.n	80018a4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	4923      	ldr	r1, [pc, #140]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a4:	4b20      	ldr	r3, [pc, #128]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	491e      	ldr	r1, [pc, #120]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	4919      	ldr	r1, [pc, #100]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	60cb      	str	r3, [r1, #12]
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4914      	ldr	r1, [pc, #80]	; (8001928 <HAL_GPIO_Init+0x2a0>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f aed6 	bne.w	800169c <HAL_GPIO_Init+0x14>
  }
}
 80018f0:	bf00      	nop
 80018f2:	372c      	adds	r7, #44	; 0x2c
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	10210000 	.word	0x10210000
 8001900:	10110000 	.word	0x10110000
 8001904:	10120000 	.word	0x10120000
 8001908:	10310000 	.word	0x10310000
 800190c:	10320000 	.word	0x10320000
 8001910:	10220000 	.word	0x10220000
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000
 800191c:	40010800 	.word	0x40010800
 8001920:	40010c00 	.word	0x40010c00
 8001924:	40011000 	.word	0x40011000
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194a:	887b      	ldrh	r3, [r7, #2]
 800194c:	041a      	lsls	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08b      	sub	sp, #44	; 0x2c
 8001960:	af06      	add	r7, sp, #24
 8001962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0d3      	b.n	8001b16 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f004 fd4a 	bl	800641c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f002 f8b2 	bl	8003afe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	687e      	ldr	r6, [r7, #4]
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	602b      	str	r3, [r5, #0]
 80019b0:	1d33      	adds	r3, r6, #4
 80019b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f002 f87b 	bl	8003ab0 <USB_CoreInit>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0a4      	b.n	8001b16 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 f8af 	bl	8003b36 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]
 80019dc:	e035      	b.n	8001a4a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	015b      	lsls	r3, r3, #5
 80019e4:	4413      	add	r3, r2
 80019e6:	3329      	adds	r3, #41	; 0x29
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	015b      	lsls	r3, r3, #5
 80019f2:	4413      	add	r3, r2
 80019f4:	3328      	adds	r3, #40	; 0x28
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	b291      	uxth	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	4413      	add	r3, r2
 8001a06:	3336      	adds	r3, #54	; 0x36
 8001a08:	460a      	mov	r2, r1
 8001a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	4413      	add	r3, r2
 8001a14:	332b      	adds	r3, #43	; 0x2b
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	015b      	lsls	r3, r3, #5
 8001a20:	4413      	add	r3, r2
 8001a22:	3338      	adds	r3, #56	; 0x38
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	4413      	add	r3, r2
 8001a30:	333c      	adds	r3, #60	; 0x3c
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	015b      	lsls	r3, r3, #5
 8001a3e:	4413      	add	r3, r2
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	3301      	adds	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3c4      	bcc.n	80019de <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e031      	b.n	8001abe <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	015b      	lsls	r3, r3, #5
 8001a60:	4413      	add	r3, r2
 8001a62:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	015b      	lsls	r3, r3, #5
 8001a80:	4413      	add	r3, r2
 8001a82:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	015b      	lsls	r3, r3, #5
 8001a90:	4413      	add	r3, r2
 8001a92:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	015b      	lsls	r3, r3, #5
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	330a      	adds	r3, #10
 8001ab0:	015b      	lsls	r3, r3, #5
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d3c8      	bcc.n	8001a5a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	687e      	ldr	r6, [r7, #4]
 8001ad0:	466d      	mov	r5, sp
 8001ad2:	f106 0410 	add.w	r4, r6, #16
 8001ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	602b      	str	r3, [r5, #0]
 8001ade:	1d33      	adds	r3, r6, #4
 8001ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	f002 f833 	bl	8003b4e <USB_DevInit>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00d      	b.n	8001b16 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 f871 	bl	8004bf6 <USB_DevDisconnect>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b1e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_Start+0x16>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e016      	b.n	8001b62 <HAL_PCD_Start+0x44>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f004 fead 	bl	800689e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f84a 	bl	8004be2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 ffbc 	bl	8003ad0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f847 	bl	8004c0a <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b86:	d102      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fadf 	bl	800214c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 f839 	bl	8004c0a <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba2:	d112      	bne.n	8001bca <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f004 fca2 	bl	8006506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f8de 	bl	8001d86 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 f81b 	bl	8004c0a <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bde:	d10b      	bne.n	8001bf8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f003 f804 	bl	8004c0a <USB_ReadInterrupts>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0c:	d10b      	bne.n	8001c26 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c20:	b292      	uxth	r2, r2
 8001c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 ffed 	bl	8004c0a <USB_ReadInterrupts>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3a:	d126      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0208 	bic.w	r2, r2, #8
 8001c66:	b292      	uxth	r2, r2
 8001c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f004 fc83 	bl	8006578 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 ffbb 	bl	8004c0a <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9e:	d13d      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0204 	orr.w	r2, r2, #4
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f002 ff8c 	bl	8004c0a <USB_ReadInterrupts>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cfc:	d10b      	bne.n	8001d16 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d10:	b292      	uxth	r2, r2
 8001d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f004 fc14 	bl	8006544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 ff72 	bl	8004c0a <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d30:	d10e      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f004 fbcd 	bl	80064ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f002 ff58 	bl	8004c0a <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d64:	d10b      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_SetAddress+0x1a>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e013      	b.n	8001dc8 <HAL_PCD_SetAddress+0x42>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	78fa      	ldrb	r2, [r7, #3]
 8001dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	78fa      	ldrb	r2, [r7, #3]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 feff 	bl	8004bbc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	70fb      	strb	r3, [r7, #3]
 8001de2:	460b      	mov	r3, r1
 8001de4:	803b      	strh	r3, [r7, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da0b      	bge.n	8001e0e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	015b      	lsls	r3, r3, #5
 8001dfe:	3328      	adds	r3, #40	; 0x28
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
 8001e0c:	e00b      	b.n	8001e26 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	015b      	lsls	r3, r3, #5
 8001e16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e32:	883a      	ldrh	r2, [r7, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	78ba      	ldrb	r2, [r7, #2]
 8001e3c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e50:	78bb      	ldrb	r3, [r7, #2]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d102      	bne.n	8001e5c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_EP_Open+0x9a>
 8001e66:	2302      	movs	r3, #2
 8001e68:	e00e      	b.n	8001e88 <HAL_PCD_EP_Open+0xb8>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fe8d 	bl	8003b98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001e86:	7afb      	ldrb	r3, [r7, #11]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da0b      	bge.n	8001ebc <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	015b      	lsls	r3, r3, #5
 8001eac:	3328      	adds	r3, #40	; 0x28
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	705a      	strb	r2, [r3, #1]
 8001eba:	e00b      	b.n	8001ed4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_PCD_EP_Close+0x5e>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e00e      	b.n	8001f0c <HAL_PCD_EP_Close+0x7c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68f9      	ldr	r1, [r7, #12]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 f939 	bl	8004174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	015b      	lsls	r3, r3, #5
 8001f2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6979      	ldr	r1, [r7, #20]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 fa98 	bl	80044a0 <USB_EPStartXfer>
 8001f70:	e005      	b.n	8001f7e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6979      	ldr	r1, [r7, #20]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fa91 	bl	80044a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	603b      	str	r3, [r7, #0]
 8001f94:	460b      	mov	r3, r1
 8001f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f98:	7afb      	ldrb	r3, [r7, #11]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	015b      	lsls	r3, r3, #5
 8001fa0:	3328      	adds	r3, #40	; 0x28
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fa5f 	bl	80044a0 <USB_EPStartXfer>
 8001fe2:	e005      	b.n	8001ff0 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fa58 	bl	80044a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b084      	sub	sp, #16
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	f003 0207 	and.w	r2, r3, #7
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d901      	bls.n	8002018 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e046      	b.n	80020a6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800201c:	2b00      	cmp	r3, #0
 800201e:	da0b      	bge.n	8002038 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	3328      	adds	r3, #40	; 0x28
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2201      	movs	r2, #1
 8002034:	705a      	strb	r2, [r3, #1]
 8002036:	e009      	b.n	800204c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_PCD_EP_SetStall+0x72>
 8002068:	2302      	movs	r3, #2
 800206a:	e01c      	b.n	80020a6 <HAL_PCD_EP_SetStall+0xac>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fcc8 	bl	8004a10 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f002 fdc6 	bl	8004c28 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d901      	bls.n	80020cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e03a      	b.n	8002142 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0b      	bge.n	80020ec <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	015b      	lsls	r3, r3, #5
 80020dc:	3328      	adds	r3, #40	; 0x28
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	705a      	strb	r2, [r3, #1]
 80020ea:	e00b      	b.n	8002104 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	015b      	lsls	r3, r3, #5
 80020f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	b2da      	uxtb	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_PCD_EP_ClrStall+0x76>
 8002120:	2302      	movs	r3, #2
 8002122:	e00e      	b.n	8002142 <HAL_PCD_EP_ClrStall+0x94>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f002 fcae 	bl	8004a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002154:	e282      	b.n	800265c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002160:	8afb      	ldrh	r3, [r7, #22]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800216a:	7d7b      	ldrb	r3, [r7, #21]
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 8142 	bne.w	80023f6 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002172:	8afb      	ldrh	r3, [r7, #22]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d151      	bne.n	8002220 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218c:	b29c      	uxth	r4, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219a:	b29b      	uxth	r3, r3
 800219c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3328      	adds	r3, #40	; 0x28
 80021a2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	3302      	adds	r3, #2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	695a      	ldr	r2, [r3, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	441a      	add	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021de:	2100      	movs	r1, #0
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 f96b 	bl	80064bc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8234 	beq.w	800265c <PCD_EP_ISR_Handler+0x510>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 822f 	bne.w	800265c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800220a:	b2da      	uxtb	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	b292      	uxth	r2, r2
 8002212:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800221e:	e21d      	b.n	800265c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002226:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002230:	8a7b      	ldrh	r3, [r7, #18]
 8002232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002236:	2b00      	cmp	r3, #0
 8002238:	d033      	beq.n	80022a2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4413      	add	r3, r2
 800224e:	3306      	adds	r3, #6
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002278:	b29b      	uxth	r3, r3
 800227a:	f002 fd24 	bl	8004cc6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29a      	uxth	r2, r3
 8002286:	f640 738f 	movw	r3, #3983	; 0xf8f
 800228a:	4013      	ands	r3, r2
 800228c:	b29c      	uxth	r4, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002296:	b292      	uxth	r2, r2
 8002298:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f004 f8e4 	bl	8006468 <HAL_PCD_SetupStageCallback>
 80022a0:	e1dc      	b.n	800265c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f280 81d8 	bge.w	800265c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022b8:	4013      	ands	r3, r2
 80022ba:	b29c      	uxth	r4, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80022c4:	b292      	uxth	r2, r2
 80022c6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	3306      	adds	r3, #6
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d019      	beq.n	8002330 <PCD_EP_ISR_Handler+0x1e4>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6959      	ldr	r1, [r3, #20]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002314:	b29b      	uxth	r3, r3
 8002316:	f002 fcd6 	bl	8004cc6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	441a      	add	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002328:	2100      	movs	r1, #0
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f004 f8ae 	bl	800648c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461c      	mov	r4, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233e:	b29b      	uxth	r3, r3
 8002340:	441c      	add	r4, r3
 8002342:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8002346:	461c      	mov	r4, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10e      	bne.n	800236e <PCD_EP_ISR_Handler+0x222>
 8002350:	8823      	ldrh	r3, [r4, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002358:	b29b      	uxth	r3, r3
 800235a:	8023      	strh	r3, [r4, #0]
 800235c:	8823      	ldrh	r3, [r4, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002368:	b29b      	uxth	r3, r3
 800236a:	8023      	strh	r3, [r4, #0]
 800236c:	e02d      	b.n	80023ca <PCD_EP_ISR_Handler+0x27e>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b3e      	cmp	r3, #62	; 0x3e
 8002374:	d812      	bhi.n	800239c <PCD_EP_ISR_Handler+0x250>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <PCD_EP_ISR_Handler+0x244>
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	3301      	adds	r3, #1
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	b29b      	uxth	r3, r3
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	b29b      	uxth	r3, r3
 8002398:	8023      	strh	r3, [r4, #0]
 800239a:	e016      	b.n	80023ca <PCD_EP_ISR_Handler+0x27e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d102      	bne.n	80023b6 <PCD_EP_ISR_Handler+0x26a>
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	029b      	lsls	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023da:	b29c      	uxth	r4, r3
 80023dc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80023e0:	b29c      	uxth	r4, r3
 80023e2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80023e6:	b29c      	uxth	r4, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4ba2      	ldr	r3, [pc, #648]	; (8002678 <PCD_EP_ISR_Handler+0x52c>)
 80023ee:	4323      	orrs	r3, r4
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8013      	strh	r3, [r2, #0]
 80023f4:	e132      	b.n	800265c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	7d7b      	ldrb	r3, [r7, #21]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f280 80d1 	bge.w	80025b2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	7d7b      	ldrb	r3, [r7, #21]
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002424:	4013      	ands	r3, r2
 8002426:	b29c      	uxth	r4, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	7d7b      	ldrb	r3, [r7, #21]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002438:	b292      	uxth	r2, r2
 800243a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800243c:	7d7b      	ldrb	r3, [r7, #21]
 800243e:	015b      	lsls	r3, r3, #5
 8002440:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	7b1b      	ldrb	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d121      	bne.n	8002496 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800245a:	b29b      	uxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	3306      	adds	r3, #6
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d072      	beq.n	8002568 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6959      	ldr	r1, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88da      	ldrh	r2, [r3, #6]
 800248e:	8bfb      	ldrh	r3, [r7, #30]
 8002490:	f002 fc19 	bl	8004cc6 <USB_ReadPMA>
 8002494:	e068      	b.n	8002568 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d021      	beq.n	80024f4 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4413      	add	r3, r2
 80024c4:	3302      	adds	r3, #2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80024da:	8bfb      	ldrh	r3, [r7, #30]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02a      	beq.n	8002536 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	891a      	ldrh	r2, [r3, #8]
 80024ec:	8bfb      	ldrh	r3, [r7, #30]
 80024ee:	f002 fbea 	bl	8004cc6 <USB_ReadPMA>
 80024f2:	e020      	b.n	8002536 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	3306      	adds	r3, #6
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	4413      	add	r3, r2
 8002512:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800251c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800251e:	8bfb      	ldrh	r3, [r7, #30]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6959      	ldr	r1, [r3, #20]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	895a      	ldrh	r2, [r3, #10]
 8002530:	8bfb      	ldrh	r3, [r7, #30]
 8002532:	f002 fbc8 	bl	8004cc6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002550:	b29c      	uxth	r4, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	441a      	add	r2, r3
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <PCD_EP_ISR_Handler+0x530>)
 8002562:	4323      	orrs	r3, r4
 8002564:	b29b      	uxth	r3, r3
 8002566:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	8bfb      	ldrh	r3, [r7, #30]
 800256e:	441a      	add	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <PCD_EP_ISR_Handler+0x446>
 8002588:	8bfa      	ldrh	r2, [r7, #30]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	429a      	cmp	r2, r3
 8002590:	d206      	bcs.n	80025a0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f003 ff77 	bl	800648c <HAL_PCD_DataOutStageCallback>
 800259e:	e008      	b.n	80025b2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	7819      	ldrb	r1, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fcb1 	bl	8001f14 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80025b2:	8a7b      	ldrh	r3, [r7, #18]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d04f      	beq.n	800265c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80025bc:	7d7b      	ldrb	r3, [r7, #21]
 80025be:	015b      	lsls	r3, r3, #5
 80025c0:	3328      	adds	r3, #40	; 0x28
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	7d7b      	ldrb	r3, [r7, #21]
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80025dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e0:	b29c      	uxth	r4, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	7d7b      	ldrb	r3, [r7, #21]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80025f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	3302      	adds	r3, #2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	441a      	add	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	4619      	mov	r1, r3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f003 ff3a 	bl	80064bc <HAL_PCD_DataInStageCallback>
 8002648:	e008      	b.n	800265c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	7819      	ldrb	r1, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	695a      	ldr	r2, [r3, #20]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fc96 	bl	8001f88 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002664:	b29b      	uxth	r3, r3
 8002666:	b21b      	sxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	f6ff ad74 	blt.w	8002156 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3724      	adds	r7, #36	; 0x24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	ffff8080 	.word	0xffff8080
 800267c:	ffff80c0 	.word	0xffff80c0

08002680 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607b      	str	r3, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	817b      	strh	r3, [r7, #10]
 800268e:	4613      	mov	r3, r2
 8002690:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d008      	beq.n	80026b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269e:	897b      	ldrh	r3, [r7, #10]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	015b      	lsls	r3, r3, #5
 80026a6:	3328      	adds	r3, #40	; 0x28
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e006      	b.n	80026be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026b0:	897b      	ldrh	r3, [r7, #10]
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80026be:	893b      	ldrh	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2200      	movs	r2, #0
 80026c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	80da      	strh	r2, [r3, #6]
 80026d2:	e00b      	b.n	80026ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2201      	movs	r2, #1
 80026d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e26c      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8087 	beq.w	8002826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002718:	4b92      	ldr	r3, [pc, #584]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b04      	cmp	r3, #4
 8002722:	d00c      	beq.n	800273e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002724:	4b8f      	ldr	r3, [pc, #572]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 030c 	and.w	r3, r3, #12
 800272c:	2b08      	cmp	r3, #8
 800272e:	d112      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
 8002730:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273c:	d10b      	bne.n	8002756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	4b89      	ldr	r3, [pc, #548]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d06c      	beq.n	8002824 <HAL_RCC_OscConfig+0x12c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d168      	bne.n	8002824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e246      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x76>
 8002760:	4b80      	ldr	r3, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7f      	ldr	r2, [pc, #508]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	e02e      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0x98>
 8002776:	4b7b      	ldr	r3, [pc, #492]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a7a      	ldr	r2, [pc, #488]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b78      	ldr	r3, [pc, #480]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a77      	ldr	r2, [pc, #476]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e01d      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0xbc>
 800279a:	4b72      	ldr	r3, [pc, #456]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a71      	ldr	r2, [pc, #452]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a4:	6013      	str	r3, [r2, #0]
 80027a6:	4b6f      	ldr	r3, [pc, #444]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a6e      	ldr	r2, [pc, #440]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e00b      	b.n	80027cc <HAL_RCC_OscConfig+0xd4>
 80027b4:	4b6b      	ldr	r3, [pc, #428]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a6a      	ldr	r2, [pc, #424]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a67      	ldr	r2, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d013      	beq.n	80027fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe f99e 	bl	8000b14 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027dc:	f7fe f99a 	bl	8000b14 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b64      	cmp	r3, #100	; 0x64
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1fa      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b5d      	ldr	r3, [pc, #372]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0xe4>
 80027fa:	e014      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fc:	f7fe f98a 	bl	8000b14 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002804:	f7fe f986 	bl	8000b14 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b64      	cmp	r3, #100	; 0x64
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e1e6      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	4b53      	ldr	r3, [pc, #332]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x10c>
 8002822:	e000      	b.n	8002826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d063      	beq.n	80028fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002832:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00b      	beq.n	8002856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800283e:	4b49      	ldr	r3, [pc, #292]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d11c      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
 800284a:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b43      	ldr	r3, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e1ba      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286e:	4b3d      	ldr	r3, [pc, #244]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4939      	ldr	r1, [pc, #228]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e03a      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x270>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe f93f 	bl	8000b14 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289a:	f7fe f93b 	bl	8000b14 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e19b      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4927      	ldr	r1, [pc, #156]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	600b      	str	r3, [r1, #0]
 80028cc:	e015      	b.n	80028fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x270>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe f91e 	bl	8000b14 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe f91a 	bl	8000b14 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e17a      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03a      	beq.n	800297c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d019      	beq.n	8002942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002914:	f7fe f8fe 	bl	8000b14 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe f8fa 	bl	8000b14 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e15a      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCC_OscConfig+0x26c>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800293a:	2001      	movs	r0, #1
 800293c:	f000 fada 	bl	8002ef4 <RCC_Delay>
 8002940:	e01c      	b.n	800297c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_OscConfig+0x274>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe f8e4 	bl	8000b14 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294e:	e00f      	b.n	8002970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe f8e0 	bl	8000b14 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d908      	bls.n	8002970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e140      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	42420000 	.word	0x42420000
 800296c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b9e      	ldr	r3, [pc, #632]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e9      	bne.n	8002950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a6 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4b97      	ldr	r3, [pc, #604]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10d      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299a:	4b94      	ldr	r3, [pc, #592]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a93      	ldr	r2, [pc, #588]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b91      	ldr	r3, [pc, #580]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b8e      	ldr	r3, [pc, #568]	; (8002bf0 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a8a      	ldr	r2, [pc, #552]	; (8002bf0 <HAL_RCC_OscConfig+0x4f8>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7fe f8a1 	bl	8000b14 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7fe f89d 	bl	8000b14 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0fd      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b81      	ldr	r3, [pc, #516]	; (8002bf0 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x312>
 80029fc:	4b7b      	ldr	r3, [pc, #492]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a7a      	ldr	r2, [pc, #488]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	e02d      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x334>
 8002a12:	4b76      	ldr	r3, [pc, #472]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4a75      	ldr	r2, [pc, #468]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6213      	str	r3, [r2, #32]
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	4a72      	ldr	r2, [pc, #456]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	6213      	str	r3, [r2, #32]
 8002a2a:	e01c      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x356>
 8002a34:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4a6c      	ldr	r2, [pc, #432]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a3a:	f043 0304 	orr.w	r3, r3, #4
 8002a3e:	6213      	str	r3, [r2, #32]
 8002a40:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a69      	ldr	r2, [pc, #420]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e00b      	b.n	8002a66 <HAL_RCC_OscConfig+0x36e>
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	4a66      	ldr	r2, [pc, #408]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	f023 0301 	bic.w	r3, r3, #1
 8002a58:	6213      	str	r3, [r2, #32]
 8002a5a:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a63      	ldr	r2, [pc, #396]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	f023 0304 	bic.w	r3, r3, #4
 8002a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe f851 	bl	8000b14 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f7fe f84d 	bl	8000b14 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e0ab      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	4b57      	ldr	r3, [pc, #348]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ee      	beq.n	8002a76 <HAL_RCC_OscConfig+0x37e>
 8002a98:	e014      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9a:	f7fe f83b 	bl	8000b14 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa2:	f7fe f837 	bl	8000b14 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e095      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b48      	ldr	r3, [pc, #288]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a47      	ldr	r2, [pc, #284]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8081 	beq.w	8002be2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	4b42      	ldr	r3, [pc, #264]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d061      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d146      	bne.n	8002b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_RCC_OscConfig+0x4fc>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afa:	f7fe f80b 	bl	8000b14 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7fe f807 	bl	8000b14 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e067      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	4b35      	ldr	r3, [pc, #212]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b28:	d108      	bne.n	8002b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2a:	4b30      	ldr	r3, [pc, #192]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	492d      	ldr	r1, [pc, #180]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a19      	ldr	r1, [r3, #32]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	430b      	orrs	r3, r1
 8002b4e:	4927      	ldr	r1, [pc, #156]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <HAL_RCC_OscConfig+0x4fc>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fd ffdb 	bl	8000b14 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fd ffd7 	bl	8000b14 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e037      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x46a>
 8002b80:	e02f      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCC_OscConfig+0x4fc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fd ffc4 	bl	8000b14 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fd ffc0 	bl	8000b14 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e020      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	4b12      	ldr	r3, [pc, #72]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x498>
 8002bae:	e018      	b.n	8002be2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e013      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40007000 	.word	0x40007000
 8002bf4:	42420060 	.word	0x42420060

08002bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0d0      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d910      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 0207 	bic.w	r2, r3, #7
 8002c22:	4965      	ldr	r1, [pc, #404]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0b8      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d040      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d115      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e073      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06b      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4936      	ldr	r1, [pc, #216]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7fd ff14 	bl	8000b14 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fd ff10 	bl	8000b14 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e053      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d210      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4922      	ldr	r1, [pc, #136]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e032      	b.n	8002dae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d86:	f000 f821 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd fe72 	bl	8000a90 <HAL_InitTick>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	080069d8 	.word	0x080069d8
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b490      	push	{r4, r7}
 8002dce:	b08a      	sub	sp, #40	; 0x28
 8002dd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dd4:	1d3c      	adds	r4, r7, #4
 8002dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
 8002dee:	2300      	movs	r3, #0
 8002df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d002      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x40>
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d003      	beq.n	8002e12 <HAL_RCC_GetSysClockFreq+0x46>
 8002e0a:	e02d      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e0e:	623b      	str	r3, [r7, #32]
      break;
 8002e10:	e02d      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	0c9b      	lsrs	r3, r3, #18
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e1e:	4413      	add	r3, r2
 8002e20:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e24:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	0c5b      	lsrs	r3, r3, #17
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e3e:	4413      	add	r3, r2
 8002e40:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e44:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e4a:	fb02 f203 	mul.w	r2, r2, r3
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
 8002e56:	e004      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e5c:	fb02 f303 	mul.w	r3, r2, r3
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	623b      	str	r3, [r7, #32]
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e6a:	623b      	str	r3, [r7, #32]
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc90      	pop	{r4, r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	0800697c 	.word	0x0800697c
 8002e80:	0800698c 	.word	0x0800698c
 8002e84:	40021000 	.word	0x40021000
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	003d0900 	.word	0x003d0900

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eac:	4601      	mov	r1, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5cd3      	ldrb	r3, [r2, r3]
 8002ebc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	080069e8 	.word	0x080069e8

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0adb      	lsrs	r3, r3, #11
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5cd3      	ldrb	r3, [r2, r3]
 8002ee4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080069e8 	.word	0x080069e8

08002ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCC_Delay+0x34>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <RCC_Delay+0x38>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a5b      	lsrs	r3, r3, #9
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f10:	bf00      	nop
  }
  while (Delay --);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f9      	bne.n	8002f10 <RCC_Delay+0x1c>
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d07d      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f50:	4b4f      	ldr	r3, [pc, #316]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10d      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b4c      	ldr	r3, [pc, #304]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f66:	61d3      	str	r3, [r2, #28]
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d118      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f84:	4b43      	ldr	r3, [pc, #268]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a42      	ldr	r2, [pc, #264]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f90:	f7fd fdc0 	bl	8000b14 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f96:	e008      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fd fdbc 	bl	8000b14 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e06d      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d02e      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d027      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fde:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe4:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d014      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fd fd8b 	bl	8000b14 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fd fd87 	bl	8000b14 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e036      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4917      	ldr	r1, [pc, #92]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	4313      	orrs	r3, r2
 8003034:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003046:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	490b      	ldr	r1, [pc, #44]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	42420440 	.word	0x42420440

0800309c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01d      	b.n	80030ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fb94 	bl	80007f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f000 f990 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e01d      	b.n	8003140 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f815 	bl	8003148 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f000 f965 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003170:	2302      	movs	r3, #2
 8003172:	e08a      	b.n	800328a <HAL_TIM_IC_ConfigChannel+0x130>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11b      	bne.n	80031c2 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f000 f981 	bl	80034a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699a      	ldr	r2, [r3, #24]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020c 	bic.w	r2, r2, #12
 80031ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6999      	ldr	r1, [r3, #24]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	619a      	str	r2, [r3, #24]
 80031c0:	e05a      	b.n	8003278 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11c      	bne.n	8003202 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f000 f9e4 	bl	80035a4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6999      	ldr	r1, [r3, #24]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	021a      	lsls	r2, r3, #8
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	619a      	str	r2, [r3, #24]
 8003200:	e03a      	b.n	8003278 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f000 fa2f 	bl	800367a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 020c 	bic.w	r2, r2, #12
 800322a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69d9      	ldr	r1, [r3, #28]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	61da      	str	r2, [r3, #28]
 800323e:	e01b      	b.n	8003278 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f000 fa4e 	bl	80036f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003262:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69d9      	ldr	r1, [r3, #28]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	021a      	lsls	r2, r3, #8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_TIM_ConfigClockSource+0x18>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e0a6      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x166>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2202      	movs	r2, #2
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032c8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d067      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x120>
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d80b      	bhi.n	80032fe <HAL_TIM_ConfigClockSource+0x6c>
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d073      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x140>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d802      	bhi.n	80032f4 <HAL_TIM_ConfigClockSource+0x62>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d06f      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80032f2:	e078      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d06c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x140>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d06a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80032fc:	e073      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80032fe:	2b70      	cmp	r3, #112	; 0x70
 8003300:	d00d      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x8c>
 8003302:	2b70      	cmp	r3, #112	; 0x70
 8003304:	d804      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x7e>
 8003306:	2b50      	cmp	r3, #80	; 0x50
 8003308:	d033      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xe0>
 800330a:	2b60      	cmp	r3, #96	; 0x60
 800330c:	d041      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800330e:	e06a      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003314:	d066      	beq.n	80033e4 <HAL_TIM_ConfigClockSource+0x152>
 8003316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800331a:	d017      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800331c:	e063      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f000 fa35 	bl	800379c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003340:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f000 fa1e 	bl	800379c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e039      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	461a      	mov	r2, r3
 8003380:	f000 f8e2 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	; 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9ec 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 8003390:	e029      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 f93c 	bl	800361c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	; 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f9dc 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 80033b0:	e019      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 f8c2 	bl	8003548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	; 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 f9cc 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e009      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 f9c3 	bl	8003768 <TIM_ITRx_SetConfig>
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80033e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003416:	d007      	beq.n	8003428 <TIM_Base_SetConfig+0x28>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <TIM_Base_SetConfig+0x98>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0x28>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a1e      	ldr	r2, [pc, #120]	; (800349c <TIM_Base_SetConfig+0x9c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0x52>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a14      	ldr	r2, [pc, #80]	; (8003498 <TIM_Base_SetConfig+0x98>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0x52>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a13      	ldr	r2, [pc, #76]	; (800349c <TIM_Base_SetConfig+0x9c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800

080034a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0201 	bic.w	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034cc:	d007      	beq.n	80034de <TIM_TI1_SetConfig+0x3e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <TIM_TI1_SetConfig+0xa0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_TI1_SetConfig+0x3e>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a1a      	ldr	r2, [pc, #104]	; (8003544 <TIM_TI1_SetConfig+0xa4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <TIM_TI1_SetConfig+0x42>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <TIM_TI1_SetConfig+0x44>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	e003      	b.n	8003502 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	b2db      	uxtb	r3, r3
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f023 030a 	bic.w	r3, r3, #10
 800351c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f003 030a 	and.w	r3, r3, #10
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800

08003548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 030a 	bic.w	r3, r3, #10
 8003584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	031b      	lsls	r3, r3, #12
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	f023 0210 	bic.w	r2, r3, #16
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	031b      	lsls	r3, r3, #12
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003658:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800367a:	b480      	push	{r7}
 800367c:	b087      	sub	sp, #28
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800372e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	031b      	lsls	r3, r3, #12
 8003734:	b29b      	uxth	r3, r3
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003742:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	031b      	lsls	r3, r3, #12
 8003748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	f043 0307 	orr.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	609a      	str	r2, [r3, #8]
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	431a      	orrs	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e032      	b.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003818:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4313      	orrs	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e03f      	b.n	80038f4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7fd f841 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2224      	movs	r2, #36	; 0x24
 8003892:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f828 	bl	80038fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003936:	f023 030c 	bic.w	r3, r3, #12
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	430b      	orrs	r3, r1
 8003942:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <UART_SetConfig+0x1ac>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d14e      	bne.n	8003a02 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003964:	f7ff fab2 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8003968:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4a4a      	ldr	r2, [pc, #296]	; (8003aac <UART_SetConfig+0x1b0>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	0119      	lsls	r1, r3, #4
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a0:	4b42      	ldr	r3, [pc, #264]	; (8003aac <UART_SetConfig+0x1b0>)
 80039a2:	fba3 0302 	umull	r0, r3, r3, r2
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2064      	movs	r0, #100	; 0x64
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	3332      	adds	r3, #50	; 0x32
 80039b4:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <UART_SetConfig+0x1b0>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c0:	4419      	add	r1, r3
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009a      	lsls	r2, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <UART_SetConfig+0x1b0>)
 80039da:	fba3 0302 	umull	r0, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2064      	movs	r0, #100	; 0x64
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <UART_SetConfig+0x1b0>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	440a      	add	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003a00:	e04d      	b.n	8003a9e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a02:	f7ff fa4f 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003a06:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	4a23      	ldr	r2, [pc, #140]	; (8003aac <UART_SetConfig+0x1b0>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	0119      	lsls	r1, r3, #4
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	441a      	add	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3e:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <UART_SetConfig+0x1b0>)
 8003a40:	fba3 0302 	umull	r0, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	2064      	movs	r0, #100	; 0x64
 8003a48:	fb00 f303 	mul.w	r3, r0, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	3332      	adds	r3, #50	; 0x32
 8003a52:	4a16      	ldr	r2, [pc, #88]	; (8003aac <UART_SetConfig+0x1b0>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a5e:	4419      	add	r1, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	009a      	lsls	r2, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <UART_SetConfig+0x1b0>)
 8003a78:	fba3 0302 	umull	r0, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2064      	movs	r0, #100	; 0x64
 8003a80:	fb00 f303 	mul.w	r3, r0, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a08      	ldr	r2, [pc, #32]	; (8003aac <UART_SetConfig+0x1b0>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40013800 	.word	0x40013800
 8003aac:	51eb851f 	.word	0x51eb851f

08003ab0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	f107 0014 	add.w	r0, r7, #20
 8003abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	b004      	add	sp, #16
 8003ace:	4770      	bx	lr

08003ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ad8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003adc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	89fb      	ldrh	r3, [r7, #14]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr

08003afe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b06:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003b0a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	b21a      	sxth	r2, r3
 8003b16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	b21b      	sxth	r3, r3
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003b4e:	b084      	sub	sp, #16
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	f107 0014 	add.w	r0, r7, #20
 8003b5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff ffa5 	bl	8003ad0 <USB_EnableGlobalInt>

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b92:	b004      	add	sp, #16
 8003b94:	4770      	bx	lr
	...

08003b98 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b98:	b490      	push	{r4, r7}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	78db      	ldrb	r3, [r3, #3]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d819      	bhi.n	8003bfa <USB_ActivateEndpoint+0x62>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <USB_ActivateEndpoint+0x34>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bf1 	.word	0x08003bf1
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003be7 	.word	0x08003be7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003bdc:	89bb      	ldrh	r3, [r7, #12]
 8003bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003be2:	81bb      	strh	r3, [r7, #12]
      break;
 8003be4:	e00d      	b.n	8003c02 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003be6:	89bb      	ldrh	r3, [r7, #12]
 8003be8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003bec:	81bb      	strh	r3, [r7, #12]
      break;
 8003bee:	e008      	b.n	8003c02 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003bf0:	89bb      	ldrh	r3, [r7, #12]
 8003bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf6:	81bb      	strh	r3, [r7, #12]
      break;
 8003bf8:	e003      	b.n	8003c02 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfe:	e000      	b.n	8003c02 <USB_ActivateEndpoint+0x6a>
      break;
 8003c00:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	441a      	add	r2, r3
 8003c0c:	89bb      	ldrh	r3, [r7, #12]
 8003c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	4313      	orrs	r3, r2
 8003c42:	b29c      	uxth	r4, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	4b8a      	ldr	r3, [pc, #552]	; (8003e78 <USB_ActivateEndpoint+0x2e0>)
 8003c50:	4323      	orrs	r3, r4
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7b1b      	ldrb	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 8112 	bne.w	8003e84 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d067      	beq.n	8003d38 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c68:	687c      	ldr	r4, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	441c      	add	r4, r3
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4423      	add	r3, r4
 8003c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c80:	461c      	mov	r4, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	88db      	ldrh	r3, [r3, #6]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29c      	uxth	r4, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d014      	beq.n	8003cd2 <USB_ActivateEndpoint+0x13a>
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	b29c      	uxth	r4, r3
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	4b6c      	ldr	r3, [pc, #432]	; (8003e7c <USB_ActivateEndpoint+0x2e4>)
 8003ccc:	4323      	orrs	r3, r4
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	78db      	ldrb	r3, [r3, #3]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d018      	beq.n	8003d0c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cf0:	b29c      	uxth	r4, r3
 8003cf2:	f084 0320 	eor.w	r3, r4, #32
 8003cf6:	b29c      	uxth	r4, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <USB_ActivateEndpoint+0x2e0>)
 8003d04:	4323      	orrs	r3, r4
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
 8003d0a:	e22b      	b.n	8004164 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d22:	b29c      	uxth	r4, r3
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <USB_ActivateEndpoint+0x2e0>)
 8003d30:	4323      	orrs	r3, r4
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
 8003d36:	e215      	b.n	8004164 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003d38:	687c      	ldr	r4, [r7, #4]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	441c      	add	r4, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4423      	add	r3, r4
 8003d4c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d50:	461c      	mov	r4, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	88db      	ldrh	r3, [r3, #6]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003d60:	687c      	ldr	r4, [r7, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	441c      	add	r4, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4423      	add	r3, r4
 8003d74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d78:	461c      	mov	r4, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10e      	bne.n	8003da0 <USB_ActivateEndpoint+0x208>
 8003d82:	8823      	ldrh	r3, [r4, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	8023      	strh	r3, [r4, #0]
 8003d8e:	8823      	ldrh	r3, [r4, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8023      	strh	r3, [r4, #0]
 8003d9e:	e02d      	b.n	8003dfc <USB_ActivateEndpoint+0x264>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b3e      	cmp	r3, #62	; 0x3e
 8003da6:	d812      	bhi.n	8003dce <USB_ActivateEndpoint+0x236>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <USB_ActivateEndpoint+0x22a>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8023      	strh	r3, [r4, #0]
 8003dcc:	e016      	b.n	8003dfc <USB_ActivateEndpoint+0x264>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <USB_ActivateEndpoint+0x250>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	60bb      	str	r3, [r7, #8]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	029b      	lsls	r3, r3, #10
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29c      	uxth	r4, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <USB_ActivateEndpoint+0x2a6>
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	b29c      	uxth	r4, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <USB_ActivateEndpoint+0x2e8>)
 8003e38:	4323      	orrs	r3, r4
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e54:	b29c      	uxth	r4, r3
 8003e56:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e5a:	b29c      	uxth	r4, r3
 8003e5c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e60:	b29c      	uxth	r4, r3
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <USB_ActivateEndpoint+0x2e0>)
 8003e6e:	4323      	orrs	r3, r4
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	8013      	strh	r3, [r2, #0]
 8003e74:	e176      	b.n	8004164 <USB_ActivateEndpoint+0x5cc>
 8003e76:	bf00      	nop
 8003e78:	ffff8080 	.word	0xffff8080
 8003e7c:	ffff80c0 	.word	0xffff80c0
 8003e80:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	b29c      	uxth	r4, r3
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	441a      	add	r2, r3
 8003ea6:	4b96      	ldr	r3, [pc, #600]	; (8004100 <USB_ActivateEndpoint+0x568>)
 8003ea8:	4323      	orrs	r3, r4
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003eae:	687c      	ldr	r4, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	441c      	add	r4, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4423      	add	r3, r4
 8003ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ec6:	461c      	mov	r4, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	891b      	ldrh	r3, [r3, #8]
 8003ecc:	085b      	lsrs	r3, r3, #1
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	8023      	strh	r3, [r4, #0]
 8003ed6:	687c      	ldr	r4, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	441c      	add	r4, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	4423      	add	r3, r4
 8003eea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003eee:	461c      	mov	r4, r3
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	895b      	ldrh	r3, [r3, #10]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	785b      	ldrb	r3, [r3, #1]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 8088 	bne.w	8004018 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29c      	uxth	r4, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <USB_ActivateEndpoint+0x3b2>
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	881b      	ldrh	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	b29c      	uxth	r4, r3
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	4b70      	ldr	r3, [pc, #448]	; (8004104 <USB_ActivateEndpoint+0x56c>)
 8003f44:	4323      	orrs	r3, r4
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29c      	uxth	r4, r3
 8003f58:	4623      	mov	r3, r4
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <USB_ActivateEndpoint+0x3f4>
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	b29c      	uxth	r4, r3
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	4b60      	ldr	r3, [pc, #384]	; (8004108 <USB_ActivateEndpoint+0x570>)
 8003f86:	4323      	orrs	r3, r4
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	b29c      	uxth	r4, r3
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	4b56      	ldr	r3, [pc, #344]	; (8004108 <USB_ActivateEndpoint+0x570>)
 8003fb0:	4323      	orrs	r3, r4
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fcc:	b29c      	uxth	r4, r3
 8003fce:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003fd2:	b29c      	uxth	r4, r3
 8003fd4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003fd8:	b29c      	uxth	r4, r3
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	441a      	add	r2, r3
 8003fe4:	4b49      	ldr	r3, [pc, #292]	; (800410c <USB_ActivateEndpoint+0x574>)
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004002:	b29c      	uxth	r4, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	4b3f      	ldr	r3, [pc, #252]	; (800410c <USB_ActivateEndpoint+0x574>)
 8004010:	4323      	orrs	r3, r4
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
 8004016:	e0a5      	b.n	8004164 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29c      	uxth	r4, r3
 8004026:	4623      	mov	r3, r4
 8004028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <USB_ActivateEndpoint+0x4c2>
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	b29c      	uxth	r4, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <USB_ActivateEndpoint+0x56c>)
 8004054:	4323      	orrs	r3, r4
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29c      	uxth	r4, r3
 8004068:	4623      	mov	r3, r4
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <USB_ActivateEndpoint+0x504>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	b29c      	uxth	r4, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <USB_ActivateEndpoint+0x570>)
 8004096:	4323      	orrs	r3, r4
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b11      	ldr	r3, [pc, #68]	; (8004104 <USB_ActivateEndpoint+0x56c>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	78db      	ldrb	r3, [r3, #3]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d020      	beq.n	8004110 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e4:	b29c      	uxth	r4, r3
 80040e6:	f084 0320 	eor.w	r3, r4, #32
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	4b05      	ldr	r3, [pc, #20]	; (800410c <USB_ActivateEndpoint+0x574>)
 80040f8:	4323      	orrs	r3, r4
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]
 80040fe:	e01c      	b.n	800413a <USB_ActivateEndpoint+0x5a2>
 8004100:	ffff8180 	.word	0xffff8180
 8004104:	ffffc080 	.word	0xffffc080
 8004108:	ffff80c0 	.word	0xffff80c0
 800410c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	b29b      	uxth	r3, r3
 800411e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	b29c      	uxth	r4, r3
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	441a      	add	r2, r3
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <USB_ActivateEndpoint+0x5d8>)
 8004134:	4323      	orrs	r3, r4
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	b29c      	uxth	r4, r3
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <USB_ActivateEndpoint+0x5d8>)
 800415e:	4323      	orrs	r3, r4
 8004160:	b29b      	uxth	r3, r3
 8004162:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004164:	7bfb      	ldrb	r3, [r7, #15]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bc90      	pop	{r4, r7}
 800416e:	4770      	bx	lr
 8004170:	ffff8080 	.word	0xffff8080

08004174 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004174:	b490      	push	{r4, r7}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	7b1b      	ldrb	r3, [r3, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d171      	bne.n	800426a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d036      	beq.n	80041fc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29c      	uxth	r4, r3
 800419c:	4623      	mov	r3, r4
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d014      	beq.n	80041d0 <USB_DeactivateEndpoint+0x5c>
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041bc:	b29c      	uxth	r4, r3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	441a      	add	r2, r3
 80041c8:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <USB_DeactivateEndpoint+0x204>)
 80041ca:	4323      	orrs	r3, r4
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e6:	b29c      	uxth	r4, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <USB_DeactivateEndpoint+0x208>)
 80041f4:	4323      	orrs	r3, r4
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
 80041fa:	e144      	b.n	8004486 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29c      	uxth	r4, r3
 800420a:	4623      	mov	r3, r4
 800420c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d014      	beq.n	800423e <USB_DeactivateEndpoint+0xca>
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	b29c      	uxth	r4, r3
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	4b52      	ldr	r3, [pc, #328]	; (8004380 <USB_DeactivateEndpoint+0x20c>)
 8004238:	4323      	orrs	r3, r4
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	b29c      	uxth	r4, r3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <USB_DeactivateEndpoint+0x208>)
 8004262:	4323      	orrs	r3, r4
 8004264:	b29b      	uxth	r3, r3
 8004266:	8013      	strh	r3, [r2, #0]
 8004268:	e10d      	b.n	8004486 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	785b      	ldrb	r3, [r3, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8088 	bne.w	8004384 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29c      	uxth	r4, r3
 8004282:	4623      	mov	r3, r4
 8004284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d014      	beq.n	80042b6 <USB_DeactivateEndpoint+0x142>
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	b29c      	uxth	r4, r3
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	4b34      	ldr	r3, [pc, #208]	; (8004380 <USB_DeactivateEndpoint+0x20c>)
 80042b0:	4323      	orrs	r3, r4
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29c      	uxth	r4, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d014      	beq.n	80042f8 <USB_DeactivateEndpoint+0x184>
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	b29c      	uxth	r4, r3
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	441a      	add	r2, r3
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <USB_DeactivateEndpoint+0x204>)
 80042f2:	4323      	orrs	r3, r4
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	b29c      	uxth	r4, r3
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	4b17      	ldr	r3, [pc, #92]	; (8004378 <USB_DeactivateEndpoint+0x204>)
 800431c:	4323      	orrs	r3, r4
 800431e:	b29b      	uxth	r3, r3
 8004320:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004338:	b29c      	uxth	r4, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	441a      	add	r2, r3
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <USB_DeactivateEndpoint+0x208>)
 8004346:	4323      	orrs	r3, r4
 8004348:	b29b      	uxth	r3, r3
 800434a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004362:	b29c      	uxth	r4, r3
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	4b03      	ldr	r3, [pc, #12]	; (800437c <USB_DeactivateEndpoint+0x208>)
 8004370:	4323      	orrs	r3, r4
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]
 8004376:	e086      	b.n	8004486 <USB_DeactivateEndpoint+0x312>
 8004378:	ffff80c0 	.word	0xffff80c0
 800437c:	ffff8080 	.word	0xffff8080
 8004380:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29c      	uxth	r4, r3
 8004392:	4623      	mov	r3, r4
 8004394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d014      	beq.n	80043c6 <USB_DeactivateEndpoint+0x252>
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	b29c      	uxth	r4, r3
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	4b35      	ldr	r3, [pc, #212]	; (8004494 <USB_DeactivateEndpoint+0x320>)
 80043c0:	4323      	orrs	r3, r4
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29c      	uxth	r4, r3
 80043d4:	4623      	mov	r3, r4
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <USB_DeactivateEndpoint+0x294>
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	b29c      	uxth	r4, r3
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	441a      	add	r2, r3
 8004400:	4b25      	ldr	r3, [pc, #148]	; (8004498 <USB_DeactivateEndpoint+0x324>)
 8004402:	4323      	orrs	r3, r4
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441e:	b29c      	uxth	r4, r3
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	4b1a      	ldr	r3, [pc, #104]	; (8004494 <USB_DeactivateEndpoint+0x320>)
 800442c:	4323      	orrs	r3, r4
 800442e:	b29b      	uxth	r3, r3
 8004430:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004448:	b29c      	uxth	r4, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <USB_DeactivateEndpoint+0x328>)
 8004456:	4323      	orrs	r3, r4
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	b29c      	uxth	r4, r3
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <USB_DeactivateEndpoint+0x328>)
 8004480:	4323      	orrs	r3, r4
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bc90      	pop	{r4, r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	ffffc080 	.word	0xffffc080
 8004498:	ffff80c0 	.word	0xffff80c0
 800449c:	ffff8080 	.word	0xffff8080

080044a0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b08d      	sub	sp, #52	; 0x34
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	f040 8160 	bne.w	8004774 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d909      	bls.n	80044d4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	1ad2      	subs	r2, r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	619a      	str	r2, [r3, #24]
 80044d2:	e005      	b.n	80044e0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	7b1b      	ldrb	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d119      	bne.n	800451c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	6959      	ldr	r1, [r3, #20]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	88da      	ldrh	r2, [r3, #6]
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 fba2 	bl	8004c3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044fa:	687c      	ldr	r4, [r7, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004502:	b29b      	uxth	r3, r3
 8004504:	441c      	add	r4, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4423      	add	r3, r4
 800450e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004512:	461c      	mov	r4, r3
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	b29b      	uxth	r3, r3
 8004518:	8023      	strh	r3, [r4, #0]
 800451a:	e10f      	b.n	800473c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d065      	beq.n	80045fe <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004532:	687c      	ldr	r4, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d148      	bne.n	80045ce <USB_EPStartXfer+0x12e>
 800453c:	687c      	ldr	r4, [r7, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004544:	b29b      	uxth	r3, r3
 8004546:	441c      	add	r4, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4423      	add	r3, r4
 8004550:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004554:	461c      	mov	r4, r3
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10e      	bne.n	800457a <USB_EPStartXfer+0xda>
 800455c:	8823      	ldrh	r3, [r4, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004564:	b29b      	uxth	r3, r3
 8004566:	8023      	strh	r3, [r4, #0]
 8004568:	8823      	ldrh	r3, [r4, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004570:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004574:	b29b      	uxth	r3, r3
 8004576:	8023      	strh	r3, [r4, #0]
 8004578:	e03d      	b.n	80045f6 <USB_EPStartXfer+0x156>
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	2b3e      	cmp	r3, #62	; 0x3e
 800457e:	d810      	bhi.n	80045a2 <USB_EPStartXfer+0x102>
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <USB_EPStartXfer+0xf6>
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	3301      	adds	r3, #1
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	b29b      	uxth	r3, r3
 800459a:	029b      	lsls	r3, r3, #10
 800459c:	b29b      	uxth	r3, r3
 800459e:	8023      	strh	r3, [r4, #0]
 80045a0:	e029      	b.n	80045f6 <USB_EPStartXfer+0x156>
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <USB_EPStartXfer+0x118>
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	3b01      	subs	r3, #1
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	029b      	lsls	r3, r3, #10
 80045be:	b29b      	uxth	r3, r3
 80045c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8023      	strh	r3, [r4, #0]
 80045cc:	e013      	b.n	80045f6 <USB_EPStartXfer+0x156>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d10f      	bne.n	80045f6 <USB_EPStartXfer+0x156>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045dc:	b29b      	uxth	r3, r3
 80045de:	441c      	add	r4, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4423      	add	r3, r4
 80045e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	895b      	ldrh	r3, [r3, #10]
 80045fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80045fc:	e063      	b.n	80046c6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	785b      	ldrb	r3, [r3, #1]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d148      	bne.n	8004698 <USB_EPStartXfer+0x1f8>
 8004606:	687c      	ldr	r4, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460e:	b29b      	uxth	r3, r3
 8004610:	441c      	add	r4, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	4423      	add	r3, r4
 800461a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800461e:	461c      	mov	r4, r3
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10e      	bne.n	8004644 <USB_EPStartXfer+0x1a4>
 8004626:	8823      	ldrh	r3, [r4, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800462e:	b29b      	uxth	r3, r3
 8004630:	8023      	strh	r3, [r4, #0]
 8004632:	8823      	ldrh	r3, [r4, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463e:	b29b      	uxth	r3, r3
 8004640:	8023      	strh	r3, [r4, #0]
 8004642:	e03d      	b.n	80046c0 <USB_EPStartXfer+0x220>
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	2b3e      	cmp	r3, #62	; 0x3e
 8004648:	d810      	bhi.n	800466c <USB_EPStartXfer+0x1cc>
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <USB_EPStartXfer+0x1c0>
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	3301      	adds	r3, #1
 800465e:	623b      	str	r3, [r7, #32]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	b29b      	uxth	r3, r3
 8004664:	029b      	lsls	r3, r3, #10
 8004666:	b29b      	uxth	r3, r3
 8004668:	8023      	strh	r3, [r4, #0]
 800466a:	e029      	b.n	80046c0 <USB_EPStartXfer+0x220>
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <USB_EPStartXfer+0x1e2>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	3b01      	subs	r3, #1
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	b29b      	uxth	r3, r3
 8004686:	029b      	lsls	r3, r3, #10
 8004688:	b29b      	uxth	r3, r3
 800468a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800468e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004692:	b29b      	uxth	r3, r3
 8004694:	8023      	strh	r3, [r4, #0]
 8004696:	e013      	b.n	80046c0 <USB_EPStartXfer+0x220>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	785b      	ldrb	r3, [r3, #1]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10f      	bne.n	80046c0 <USB_EPStartXfer+0x220>
 80046a0:	687c      	ldr	r4, [r7, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	441c      	add	r4, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4423      	add	r3, r4
 80046b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b8:	461c      	mov	r4, r3
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	891b      	ldrh	r3, [r3, #8]
 80046c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6959      	ldr	r1, [r3, #20]
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fab4 	bl	8004c3e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d115      	bne.n	800470a <USB_EPStartXfer+0x26a>
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	b29c      	uxth	r4, r3
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	4b9a      	ldr	r3, [pc, #616]	; (800496c <USB_EPStartXfer+0x4cc>)
 8004702:	4323      	orrs	r3, r4
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
 8004708:	e018      	b.n	800473c <USB_EPStartXfer+0x29c>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	785b      	ldrb	r3, [r3, #1]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d114      	bne.n	800473c <USB_EPStartXfer+0x29c>
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004728:	b29c      	uxth	r4, r3
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <USB_EPStartXfer+0x4d0>)
 8004736:	4323      	orrs	r3, r4
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	b29c      	uxth	r4, r3
 8004754:	f084 0310 	eor.w	r3, r4, #16
 8004758:	b29c      	uxth	r4, r3
 800475a:	f084 0320 	eor.w	r3, r4, #32
 800475e:	b29c      	uxth	r4, r3
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	4b82      	ldr	r3, [pc, #520]	; (8004974 <USB_EPStartXfer+0x4d4>)
 800476c:	4323      	orrs	r3, r4
 800476e:	b29b      	uxth	r3, r3
 8004770:	8013      	strh	r3, [r2, #0]
 8004772:	e146      	b.n	8004a02 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	699a      	ldr	r2, [r3, #24]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	429a      	cmp	r2, r3
 800477e:	d909      	bls.n	8004794 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478c:	1ad2      	subs	r2, r2, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	619a      	str	r2, [r3, #24]
 8004792:	e005      	b.n	80047a0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	7b1b      	ldrb	r3, [r3, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d148      	bne.n	800483a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80047a8:	687c      	ldr	r4, [r7, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	441c      	add	r4, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	4423      	add	r3, r4
 80047bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c0:	461c      	mov	r4, r3
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10e      	bne.n	80047e6 <USB_EPStartXfer+0x346>
 80047c8:	8823      	ldrh	r3, [r4, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	8023      	strh	r3, [r4, #0]
 80047d4:	8823      	ldrh	r3, [r4, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	8023      	strh	r3, [r4, #0]
 80047e4:	e0f2      	b.n	80049cc <USB_EPStartXfer+0x52c>
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2b3e      	cmp	r3, #62	; 0x3e
 80047ea:	d810      	bhi.n	800480e <USB_EPStartXfer+0x36e>
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	61fb      	str	r3, [r7, #28]
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <USB_EPStartXfer+0x362>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	3301      	adds	r3, #1
 8004800:	61fb      	str	r3, [r7, #28]
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	b29b      	uxth	r3, r3
 8004806:	029b      	lsls	r3, r3, #10
 8004808:	b29b      	uxth	r3, r3
 800480a:	8023      	strh	r3, [r4, #0]
 800480c:	e0de      	b.n	80049cc <USB_EPStartXfer+0x52c>
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <USB_EPStartXfer+0x384>
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	3b01      	subs	r3, #1
 8004822:	61fb      	str	r3, [r7, #28]
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	b29b      	uxth	r3, r3
 8004828:	029b      	lsls	r3, r3, #10
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29b      	uxth	r3, r3
 8004836:	8023      	strh	r3, [r4, #0]
 8004838:	e0c8      	b.n	80049cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	785b      	ldrb	r3, [r3, #1]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d148      	bne.n	80048d4 <USB_EPStartXfer+0x434>
 8004842:	687c      	ldr	r4, [r7, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	441c      	add	r4, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	4423      	add	r3, r4
 8004856:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800485a:	461c      	mov	r4, r3
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10e      	bne.n	8004880 <USB_EPStartXfer+0x3e0>
 8004862:	8823      	ldrh	r3, [r4, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486a:	b29b      	uxth	r3, r3
 800486c:	8023      	strh	r3, [r4, #0]
 800486e:	8823      	ldrh	r3, [r4, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487a:	b29b      	uxth	r3, r3
 800487c:	8023      	strh	r3, [r4, #0]
 800487e:	e03d      	b.n	80048fc <USB_EPStartXfer+0x45c>
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	2b3e      	cmp	r3, #62	; 0x3e
 8004884:	d810      	bhi.n	80048a8 <USB_EPStartXfer+0x408>
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <USB_EPStartXfer+0x3fc>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	3301      	adds	r3, #1
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8023      	strh	r3, [r4, #0]
 80048a6:	e029      	b.n	80048fc <USB_EPStartXfer+0x45c>
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	f003 031f 	and.w	r3, r3, #31
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <USB_EPStartXfer+0x41e>
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	8023      	strh	r3, [r4, #0]
 80048d2:	e013      	b.n	80048fc <USB_EPStartXfer+0x45c>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	785b      	ldrb	r3, [r3, #1]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10f      	bne.n	80048fc <USB_EPStartXfer+0x45c>
 80048dc:	687c      	ldr	r4, [r7, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	441c      	add	r4, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	4423      	add	r3, r4
 80048f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048f4:	461c      	mov	r4, r3
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8023      	strh	r3, [r4, #0]
 80048fc:	687c      	ldr	r4, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d14e      	bne.n	80049a4 <USB_EPStartXfer+0x504>
 8004906:	687c      	ldr	r4, [r7, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490e:	b29b      	uxth	r3, r3
 8004910:	441c      	add	r4, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	4423      	add	r3, r4
 800491a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800491e:	461c      	mov	r4, r3
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10e      	bne.n	8004944 <USB_EPStartXfer+0x4a4>
 8004926:	8823      	ldrh	r3, [r4, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800492e:	b29b      	uxth	r3, r3
 8004930:	8023      	strh	r3, [r4, #0]
 8004932:	8823      	ldrh	r3, [r4, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493e:	b29b      	uxth	r3, r3
 8004940:	8023      	strh	r3, [r4, #0]
 8004942:	e043      	b.n	80049cc <USB_EPStartXfer+0x52c>
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	2b3e      	cmp	r3, #62	; 0x3e
 8004948:	d816      	bhi.n	8004978 <USB_EPStartXfer+0x4d8>
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <USB_EPStartXfer+0x4c0>
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3301      	adds	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	b29b      	uxth	r3, r3
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	b29b      	uxth	r3, r3
 8004968:	8023      	strh	r3, [r4, #0]
 800496a:	e02f      	b.n	80049cc <USB_EPStartXfer+0x52c>
 800496c:	ffff80c0 	.word	0xffff80c0
 8004970:	ffffc080 	.word	0xffffc080
 8004974:	ffff8080 	.word	0xffff8080
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2b00      	cmp	r3, #0
 8004986:	d102      	bne.n	800498e <USB_EPStartXfer+0x4ee>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3b01      	subs	r3, #1
 800498c:	617b      	str	r3, [r7, #20]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	b29b      	uxth	r3, r3
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800499e:	b29b      	uxth	r3, r3
 80049a0:	8023      	strh	r3, [r4, #0]
 80049a2:	e013      	b.n	80049cc <USB_EPStartXfer+0x52c>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d10f      	bne.n	80049cc <USB_EPStartXfer+0x52c>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	441c      	add	r4, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	4423      	add	r3, r4
 80049be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	b29c      	uxth	r4, r3
 80049e4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80049e8:	b29c      	uxth	r4, r3
 80049ea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80049ee:	b29c      	uxth	r4, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <USB_EPStartXfer+0x56c>)
 80049fc:	4323      	orrs	r3, r4
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3734      	adds	r7, #52	; 0x34
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd90      	pop	{r4, r7, pc}
 8004a0c:	ffff8080 	.word	0xffff8080

08004a10 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a10:	b490      	push	{r4, r7}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d018      	beq.n	8004a54 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a38:	b29c      	uxth	r4, r3
 8004a3a:	f084 0310 	eor.w	r3, r4, #16
 8004a3e:	b29c      	uxth	r4, r3
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <USB_EPSetStall+0x80>)
 8004a4c:	4323      	orrs	r3, r4
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
 8004a52:	e017      	b.n	8004a84 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	b29c      	uxth	r4, r3
 8004a6c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a70:	b29c      	uxth	r4, r3
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <USB_EPSetStall+0x80>)
 8004a7e:	4323      	orrs	r3, r4
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc90      	pop	{r4, r7}
 8004a8e:	4770      	bx	lr
 8004a90:	ffff8080 	.word	0xffff8080

08004a94 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a94:	b490      	push	{r4, r7}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	7b1b      	ldrb	r3, [r3, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d17d      	bne.n	8004ba2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d03d      	beq.n	8004b2a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29c      	uxth	r4, r3
 8004abc:	4623      	mov	r3, r4
 8004abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d014      	beq.n	8004af0 <USB_EPClearStall+0x5c>
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	b29c      	uxth	r4, r3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <USB_EPClearStall+0x11c>)
 8004aea:	4323      	orrs	r3, r4
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	78db      	ldrb	r3, [r3, #3]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d054      	beq.n	8004ba2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0e:	b29c      	uxth	r4, r3
 8004b10:	f084 0320 	eor.w	r3, r4, #32
 8004b14:	b29c      	uxth	r4, r3
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <USB_EPClearStall+0x120>)
 8004b22:	4323      	orrs	r3, r4
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	8013      	strh	r3, [r2, #0]
 8004b28:	e03b      	b.n	8004ba2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29c      	uxth	r4, r3
 8004b38:	4623      	mov	r3, r4
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d014      	beq.n	8004b6c <USB_EPClearStall+0xd8>
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	b29c      	uxth	r4, r3
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	441a      	add	r2, r3
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <USB_EPClearStall+0x124>)
 8004b66:	4323      	orrs	r3, r4
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	b29c      	uxth	r4, r3
 8004b84:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004b88:	b29c      	uxth	r4, r3
 8004b8a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004b8e:	b29c      	uxth	r4, r3
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	441a      	add	r2, r3
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <USB_EPClearStall+0x120>)
 8004b9c:	4323      	orrs	r3, r4
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc90      	pop	{r4, r7}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	ffff80c0 	.word	0xffff80c0
 8004bb4:	ffff8080 	.word	0xffff8080
 8004bb8:	ffffc080 	.word	0xffffc080

08004bbc <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2280      	movs	r2, #128	; 0x80
 8004bd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bc80      	pop	{r7}
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	b085      	sub	sp, #20
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b08d      	sub	sp, #52	; 0x34
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	4611      	mov	r1, r2
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	80fb      	strh	r3, [r7, #6]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c54:	88bb      	ldrh	r3, [r7, #4]
 8004c56:	3301      	adds	r3, #1
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c64:	88fb      	ldrh	r3, [r7, #6]
 8004c66:	005a      	lsls	r2, r3, #1
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	e01e      	b.n	8004cb6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	3301      	adds	r3, #1
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	461a      	mov	r2, r3
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca6:	3302      	adds	r3, #2
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	3301      	adds	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1dd      	bne.n	8004c78 <USB_WritePMA+0x3a>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3734      	adds	r7, #52	; 0x34
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b08b      	sub	sp, #44	; 0x2c
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	80fb      	strh	r3, [r7, #6]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004cdc:	88bb      	ldrh	r3, [r7, #4]
 8004cde:	085b      	lsrs	r3, r3, #1
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	005a      	lsls	r2, r3, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	e01b      	b.n	8004d38 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	3302      	adds	r3, #2
 8004d30:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	3b01      	subs	r3, #1
 8004d36:	627b      	str	r3, [r7, #36]	; 0x24
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e0      	bne.n	8004d00 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d3e:	88bb      	ldrh	r3, [r7, #4]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	701a      	strb	r2, [r3, #0]
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	372c      	adds	r7, #44	; 0x2c
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d70:	2304      	movs	r3, #4
 8004d72:	2203      	movs	r2, #3
 8004d74:	2181      	movs	r1, #129	; 0x81
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fc6f 	bl	800665a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d82:	2010      	movs	r0, #16
 8004d84:	f001 fd76 	bl	8006874 <USBD_static_malloc>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e005      	b.n	8004daa <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da4:	2200      	movs	r2, #0
 8004da6:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004dbe:	2181      	movs	r1, #129	; 0x81
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fc70 	bl	80066a6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fd55 	bl	800688c <USBD_static_free>
    pdev->pClassData = NULL;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e04:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d045      	beq.n	8004eae <USBD_HID_Setup+0xba>
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	f040 80d3 	bne.w	8004fce <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	3b02      	subs	r3, #2
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d835      	bhi.n	8004e9e <USBD_HID_Setup+0xaa>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <USBD_HID_Setup+0x44>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e8f 	.word	0x08004e8f
 8004e3c:	08004e6f 	.word	0x08004e6f
 8004e40:	08004e9f 	.word	0x08004e9f
 8004e44:	08004e9f 	.word	0x08004e9f
 8004e48:	08004e9f 	.word	0x08004e9f
 8004e4c:	08004e9f 	.word	0x08004e9f
 8004e50:	08004e9f 	.word	0x08004e9f
 8004e54:	08004e9f 	.word	0x08004e9f
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e61 	.word	0x08004e61
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	885b      	ldrh	r3, [r3, #2]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	601a      	str	r2, [r3, #0]
          break;
 8004e6c:	e01e      	b.n	8004eac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2201      	movs	r2, #1
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f001 f937 	bl	80060e8 <USBD_CtlSendData>
          break;
 8004e7a:	e017      	b.n	8004eac <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	885b      	ldrh	r3, [r3, #2]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	605a      	str	r2, [r3, #4]
          break;
 8004e8c:	e00e      	b.n	8004eac <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2201      	movs	r2, #1
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 f926 	bl	80060e8 <USBD_CtlSendData>
          break;
 8004e9c:	e006      	b.n	8004eac <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 f8b7 	bl	8006014 <USBD_CtlError>
          ret = USBD_FAIL;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8004eaa:	bf00      	nop
      }
      break;
 8004eac:	e096      	b.n	8004fdc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b0b      	cmp	r3, #11
 8004eb4:	f200 8083 	bhi.w	8004fbe <USBD_HID_Setup+0x1ca>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <USBD_HID_Setup+0xcc>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ef1 	.word	0x08004ef1
 8004ec4:	08004fbf 	.word	0x08004fbf
 8004ec8:	08004fbf 	.word	0x08004fbf
 8004ecc:	08004fbf 	.word	0x08004fbf
 8004ed0:	08004fbf 	.word	0x08004fbf
 8004ed4:	08004fbf 	.word	0x08004fbf
 8004ed8:	08004f19 	.word	0x08004f19
 8004edc:	08004fbf 	.word	0x08004fbf
 8004ee0:	08004fbf 	.word	0x08004fbf
 8004ee4:	08004fbf 	.word	0x08004fbf
 8004ee8:	08004f71 	.word	0x08004f71
 8004eec:	08004f99 	.word	0x08004f99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d107      	bne.n	8004f0a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004efa:	f107 030e 	add.w	r3, r7, #14
 8004efe:	2202      	movs	r2, #2
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 f8f0 	bl	80060e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f08:	e060      	b.n	8004fcc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f001 f881 	bl	8006014 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f12:	2302      	movs	r3, #2
 8004f14:	75fb      	strb	r3, [r7, #23]
          break;
 8004f16:	e059      	b.n	8004fcc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	885b      	ldrh	r3, [r3, #2]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b22      	cmp	r3, #34	; 0x22
 8004f22:	d108      	bne.n	8004f36 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	88db      	ldrh	r3, [r3, #6]
 8004f28:	2b4a      	cmp	r3, #74	; 0x4a
 8004f2a:	bf28      	it	cs
 8004f2c:	234a      	movcs	r3, #74	; 0x4a
 8004f2e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8004f30:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <USBD_HID_Setup+0x1f4>)
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e015      	b.n	8004f62 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	885b      	ldrh	r3, [r3, #2]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b21      	cmp	r3, #33	; 0x21
 8004f40:	d108      	bne.n	8004f54 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8004f42:	4b2a      	ldr	r3, [pc, #168]	; (8004fec <USBD_HID_Setup+0x1f8>)
 8004f44:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	88db      	ldrh	r3, [r3, #6]
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	bf28      	it	cs
 8004f4e:	2309      	movcs	r3, #9
 8004f50:	83fb      	strh	r3, [r7, #30]
 8004f52:	e006      	b.n	8004f62 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 f85c 	bl	8006014 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f60:	e034      	b.n	8004fcc <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8004f62:	8bfb      	ldrh	r3, [r7, #30]
 8004f64:	461a      	mov	r2, r3
 8004f66:	69b9      	ldr	r1, [r7, #24]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 f8bd 	bl	80060e8 <USBD_CtlSendData>
          break;
 8004f6e:	e02d      	b.n	8004fcc <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d107      	bne.n	8004f8a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 f8b0 	bl	80060e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f88:	e020      	b.n	8004fcc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 f841 	bl	8006014 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f92:	2302      	movs	r3, #2
 8004f94:	75fb      	strb	r3, [r7, #23]
          break;
 8004f96:	e019      	b.n	8004fcc <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d106      	bne.n	8004fb0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	885b      	ldrh	r3, [r3, #2]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fae:	e00d      	b.n	8004fcc <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004fb0:	6839      	ldr	r1, [r7, #0]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 f82e 	bl	8006014 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	75fb      	strb	r3, [r7, #23]
          break;
 8004fbc:	e006      	b.n	8004fcc <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f001 f827 	bl	8006014 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8004fca:	bf00      	nop
      }
      break;
 8004fcc:	e006      	b.n	8004fdc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f001 f81f 	bl	8006014 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004fda:	bf00      	nop
  }

  return ret;
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200000c8 	.word	0x200000c8
 8004fec:	200000b0 	.word	0x200000b0

08004ff0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005004:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500c:	2b03      	cmp	r3, #3
 800500e:	d10c      	bne.n	800502a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	7b1b      	ldrb	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d108      	bne.n	800502a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2201      	movs	r2, #1
 800501c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	2181      	movs	r1, #129	; 0x81
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f001 fbdf 	bl	80067e8 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2222      	movs	r2, #34	; 0x22
 8005040:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005042:	4b03      	ldr	r3, [pc, #12]	; (8005050 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000044 	.word	0x20000044

08005054 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2222      	movs	r2, #34	; 0x22
 8005060:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000068 	.word	0x20000068

08005074 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2222      	movs	r2, #34	; 0x22
 8005080:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005082:	4b03      	ldr	r3, [pc, #12]	; (8005090 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005084:	4618      	mov	r0, r3
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	2000008c 	.word	0x2000008c

08005094 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a6:	2200      	movs	r2, #0
 80050a8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
	...

080050b8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	220a      	movs	r2, #10
 80050c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80050c6:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	200000bc 	.word	0x200000bc

080050d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050ec:	2302      	movs	r3, #2
 80050ee:	e01a      	b.n	8005126 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	79fa      	ldrb	r2, [r7, #7]
 800511c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 fa38 	bl	8006594 <USBD_LL_Init>

  return USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	73fb      	strb	r3, [r7, #15]
 800514e:	e001      	b.n	8005154 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005150:	2302      	movs	r3, #2
 8005152:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr

08005160 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 fa5b 	bl	8006624 <USBD_LL_Start>

  return USBD_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	460b      	mov	r3, r1
 8005196:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005198:	2302      	movs	r3, #2
 800519a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	4611      	mov	r1, r2
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	4611      	mov	r1, r2
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4798      	blx	r3

  return USBD_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f000 feca 	bl	8005f9c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005216:	461a      	mov	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	2b01      	cmp	r3, #1
 800522a:	d00c      	beq.n	8005246 <USBD_LL_SetupStage+0x56>
 800522c:	2b01      	cmp	r3, #1
 800522e:	d302      	bcc.n	8005236 <USBD_LL_SetupStage+0x46>
 8005230:	2b02      	cmp	r3, #2
 8005232:	d010      	beq.n	8005256 <USBD_LL_SetupStage+0x66>
 8005234:	e017      	b.n	8005266 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9ca 	bl	80055d8 <USBD_StdDevReq>
      break;
 8005244:	e01a      	b.n	800527c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa2c 	bl	80056ac <USBD_StdItfReq>
      break;
 8005254:	e012      	b.n	800527c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa6a 	bl	8005738 <USBD_StdEPReq>
      break;
 8005264:	e00a      	b.n	800527c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800526c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005270:	b2db      	uxtb	r3, r3
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f001 fa35 	bl	80066e4 <USBD_LL_StallEP>
      break;
 800527a:	bf00      	nop
  }

  return USBD_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	460b      	mov	r3, r1
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d14b      	bne.n	8005332 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d134      	bne.n	8005316 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d919      	bls.n	80052ec <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	1ad2      	subs	r2, r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d203      	bcs.n	80052da <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	e002      	b.n	80052e0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052de:	b29b      	uxth	r3, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 ff2d 	bl	8006144 <USBD_CtlContinueRx>
 80052ea:	e038      	b.n	800535e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d105      	bne.n	800530e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 ff2a 	bl	8006168 <USBD_CtlSendStatus>
 8005314:	e023      	b.n	800535e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800531c:	2b05      	cmp	r3, #5
 800531e:	d11e      	bne.n	800535e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005328:	2100      	movs	r1, #0
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 f9da 	bl	80066e4 <USBD_LL_StallEP>
 8005330:	e015      	b.n	800535e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005344:	2b03      	cmp	r3, #3
 8005346:	d108      	bne.n	800535a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	7afa      	ldrb	r2, [r7, #11]
 8005352:	4611      	mov	r1, r2
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	4798      	blx	r3
 8005358:	e001      	b.n	800535e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800535a:	2302      	movs	r3, #2
 800535c:	e000      	b.n	8005360 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	460b      	mov	r3, r1
 8005372:	607a      	str	r2, [r7, #4]
 8005374:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d17f      	bne.n	800547c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3314      	adds	r3, #20
 8005380:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005388:	2b02      	cmp	r3, #2
 800538a:	d15c      	bne.n	8005446 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d915      	bls.n	80053c4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	1ad2      	subs	r2, r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	461a      	mov	r2, r3
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 feb5 	bl	8006120 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053b6:	2300      	movs	r3, #0
 80053b8:	2200      	movs	r2, #0
 80053ba:	2100      	movs	r1, #0
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f001 fa36 	bl	800682e <USBD_LL_PrepareReceive>
 80053c2:	e04e      	b.n	8005462 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	6912      	ldr	r2, [r2, #16]
 80053cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80053d0:	fb02 f201 	mul.w	r2, r2, r1
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d11c      	bne.n	8005414 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d316      	bcc.n	8005414 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d20f      	bcs.n	8005414 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053f4:	2200      	movs	r2, #0
 80053f6:	2100      	movs	r1, #0
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fe91 	bl	8006120 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005406:	2300      	movs	r3, #0
 8005408:	2200      	movs	r2, #0
 800540a:	2100      	movs	r1, #0
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f001 fa0e 	bl	800682e <USBD_LL_PrepareReceive>
 8005412:	e026      	b.n	8005462 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005426:	2b03      	cmp	r3, #3
 8005428:	d105      	bne.n	8005436 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f001 f953 	bl	80066e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fea5 	bl	800618e <USBD_CtlReceiveStatus>
 8005444:	e00d      	b.n	8005462 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800544c:	2b04      	cmp	r3, #4
 800544e:	d004      	beq.n	800545a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005456:	2b00      	cmp	r3, #0
 8005458:	d103      	bne.n	8005462 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f001 f941 	bl	80066e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11d      	bne.n	80054a8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f7ff fe83 	bl	8005178 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800547a:	e015      	b.n	80054a8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00d      	beq.n	80054a4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800548e:	2b03      	cmp	r3, #3
 8005490:	d108      	bne.n	80054a4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	7afa      	ldrb	r2, [r7, #11]
 800549c:	4611      	mov	r1, r2
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	4798      	blx	r3
 80054a2:	e001      	b.n	80054a8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80054a4:	2302      	movs	r3, #2
 80054a6:	e000      	b.n	80054aa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054ba:	2340      	movs	r3, #64	; 0x40
 80054bc:	2200      	movs	r2, #0
 80054be:	2100      	movs	r1, #0
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 f8ca 	bl	800665a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2240      	movs	r2, #64	; 0x40
 80054d2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054d6:	2340      	movs	r3, #64	; 0x40
 80054d8:	2200      	movs	r2, #0
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f8bc 	bl	800665a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2240      	movs	r2, #64	; 0x40
 80054ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6852      	ldr	r2, [r2, #4]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	4611      	mov	r1, r2
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
  }

  return USBD_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr

0800557a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005588:	2b04      	cmp	r3, #4
 800558a:	d105      	bne.n	8005598 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d10b      	bne.n	80055ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d004      	beq.n	80055fc <USBD_StdDevReq+0x24>
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d002      	beq.n	80055fc <USBD_StdDevReq+0x24>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <USBD_StdDevReq+0x34>
 80055fa:	e04c      	b.n	8005696 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	4798      	blx	r3
      break;
 800560a:	e049      	b.n	80056a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b09      	cmp	r3, #9
 8005612:	d83a      	bhi.n	800568a <USBD_StdDevReq+0xb2>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <USBD_StdDevReq+0x44>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	0800566d 	.word	0x0800566d
 8005620:	08005681 	.word	0x08005681
 8005624:	0800568b 	.word	0x0800568b
 8005628:	08005677 	.word	0x08005677
 800562c:	0800568b 	.word	0x0800568b
 8005630:	0800564f 	.word	0x0800564f
 8005634:	08005645 	.word	0x08005645
 8005638:	0800568b 	.word	0x0800568b
 800563c:	08005663 	.word	0x08005663
 8005640:	08005659 	.word	0x08005659
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005644:	6839      	ldr	r1, [r7, #0]
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9d4 	bl	80059f4 <USBD_GetDescriptor>
          break;
 800564c:	e022      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fb37 	bl	8005cc4 <USBD_SetAddress>
          break;
 8005656:	e01d      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005658:	6839      	ldr	r1, [r7, #0]
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fb74 	bl	8005d48 <USBD_SetConfig>
          break;
 8005660:	e018      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fbfd 	bl	8005e64 <USBD_GetConfig>
          break;
 800566a:	e013      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fc2c 	bl	8005ecc <USBD_GetStatus>
          break;
 8005674:	e00e      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005676:	6839      	ldr	r1, [r7, #0]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc5a 	bl	8005f32 <USBD_SetFeature>
          break;
 800567e:	e009      	b.n	8005694 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005680:	6839      	ldr	r1, [r7, #0]
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fc69 	bl	8005f5a <USBD_ClrFeature>
          break;
 8005688:	e004      	b.n	8005694 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fcc1 	bl	8006014 <USBD_CtlError>
          break;
 8005692:	bf00      	nop
      }
      break;
 8005694:	e004      	b.n	80056a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fcbb 	bl	8006014 <USBD_CtlError>
      break;
 800569e:	bf00      	nop
  }

  return ret;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	d003      	beq.n	80056ce <USBD_StdItfReq+0x22>
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d001      	beq.n	80056ce <USBD_StdItfReq+0x22>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d12a      	bne.n	8005724 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d4:	3b01      	subs	r3, #1
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d81d      	bhi.n	8005716 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	889b      	ldrh	r3, [r3, #4]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d813      	bhi.n	800570c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	88db      	ldrh	r3, [r3, #6]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d110      	bne.n	8005720 <USBD_StdItfReq+0x74>
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10d      	bne.n	8005720 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fd2f 	bl	8006168 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800570a:	e009      	b.n	8005720 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fc80 	bl	8006014 <USBD_CtlError>
          break;
 8005714:	e004      	b.n	8005720 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fc7b 	bl	8006014 <USBD_CtlError>
          break;
 800571e:	e000      	b.n	8005722 <USBD_StdItfReq+0x76>
          break;
 8005720:	bf00      	nop
      }
      break;
 8005722:	e004      	b.n	800572e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fc74 	bl	8006014 <USBD_CtlError>
      break;
 800572c:	bf00      	nop
  }

  return USBD_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	889b      	ldrh	r3, [r3, #4]
 800574a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005754:	2b20      	cmp	r3, #32
 8005756:	d004      	beq.n	8005762 <USBD_StdEPReq+0x2a>
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d002      	beq.n	8005762 <USBD_StdEPReq+0x2a>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <USBD_StdEPReq+0x3a>
 8005760:	e13d      	b.n	80059de <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	4798      	blx	r3
      break;
 8005770:	e13a      	b.n	80059e8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800577a:	2b20      	cmp	r3, #32
 800577c:	d10a      	bne.n	8005794 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
 800578c:	4603      	mov	r3, r0
 800578e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	e12a      	b.n	80059ea <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d03e      	beq.n	800581a <USBD_StdEPReq+0xe2>
 800579c:	2b03      	cmp	r3, #3
 800579e:	d002      	beq.n	80057a6 <USBD_StdEPReq+0x6e>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d070      	beq.n	8005886 <USBD_StdEPReq+0x14e>
 80057a4:	e115      	b.n	80059d2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d002      	beq.n	80057b6 <USBD_StdEPReq+0x7e>
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d015      	beq.n	80057e0 <USBD_StdEPReq+0xa8>
 80057b4:	e02b      	b.n	800580e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <USBD_StdEPReq+0x9e>
 80057bc:	7bbb      	ldrb	r3, [r7, #14]
 80057be:	2b80      	cmp	r3, #128	; 0x80
 80057c0:	d009      	beq.n	80057d6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057c2:	7bbb      	ldrb	r3, [r7, #14]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 ff8c 	bl	80066e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 ff88 	bl	80066e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057d4:	e020      	b.n	8005818 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fc1b 	bl	8006014 <USBD_CtlError>
              break;
 80057de:	e01b      	b.n	8005818 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	885b      	ldrh	r3, [r3, #2]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10e      	bne.n	8005806 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <USBD_StdEPReq+0xce>
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d008      	beq.n	8005806 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	88db      	ldrh	r3, [r3, #6]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 ff6f 	bl	80066e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fcae 	bl	8006168 <USBD_CtlSendStatus>

              break;
 800580c:	e004      	b.n	8005818 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fbff 	bl	8006014 <USBD_CtlError>
              break;
 8005816:	bf00      	nop
          }
          break;
 8005818:	e0e0      	b.n	80059dc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005820:	2b02      	cmp	r3, #2
 8005822:	d002      	beq.n	800582a <USBD_StdEPReq+0xf2>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d015      	beq.n	8005854 <USBD_StdEPReq+0x11c>
 8005828:	e026      	b.n	8005878 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <USBD_StdEPReq+0x112>
 8005830:	7bbb      	ldrb	r3, [r7, #14]
 8005832:	2b80      	cmp	r3, #128	; 0x80
 8005834:	d009      	beq.n	800584a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 ff52 	bl	80066e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 ff4e 	bl	80066e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005848:	e01c      	b.n	8005884 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fbe1 	bl	8006014 <USBD_CtlError>
              break;
 8005852:	e017      	b.n	8005884 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	885b      	ldrh	r3, [r3, #2]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d112      	bne.n	8005882 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800585c:	7bbb      	ldrb	r3, [r7, #14]
 800585e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 ff59 	bl	8006722 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fc79 	bl	8006168 <USBD_CtlSendStatus>
              }
              break;
 8005876:	e004      	b.n	8005882 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fbca 	bl	8006014 <USBD_CtlError>
              break;
 8005880:	e000      	b.n	8005884 <USBD_StdEPReq+0x14c>
              break;
 8005882:	bf00      	nop
          }
          break;
 8005884:	e0aa      	b.n	80059dc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588c:	2b02      	cmp	r3, #2
 800588e:	d002      	beq.n	8005896 <USBD_StdEPReq+0x15e>
 8005890:	2b03      	cmp	r3, #3
 8005892:	d032      	beq.n	80058fa <USBD_StdEPReq+0x1c2>
 8005894:	e097      	b.n	80059c6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005896:	7bbb      	ldrb	r3, [r7, #14]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <USBD_StdEPReq+0x174>
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d004      	beq.n	80058ac <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fbb5 	bl	8006014 <USBD_CtlError>
                break;
 80058aa:	e091      	b.n	80059d0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da0b      	bge.n	80058cc <USBD_StdEPReq+0x194>
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	3310      	adds	r3, #16
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	4413      	add	r3, r2
 80058c8:	3304      	adds	r3, #4
 80058ca:	e00b      	b.n	80058e4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058cc:	7bbb      	ldrb	r3, [r7, #14]
 80058ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	3304      	adds	r3, #4
 80058e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fbf8 	bl	80060e8 <USBD_CtlSendData>
              break;
 80058f8:	e06a      	b.n	80059d0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da11      	bge.n	8005926 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	f003 020f 	and.w	r2, r3, #15
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	3318      	adds	r3, #24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d117      	bne.n	800594c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fb78 	bl	8006014 <USBD_CtlError>
                  break;
 8005924:	e054      	b.n	80059d0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005942:	6839      	ldr	r1, [r7, #0]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb65 	bl	8006014 <USBD_CtlError>
                  break;
 800594a:	e041      	b.n	80059d0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800594c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005950:	2b00      	cmp	r3, #0
 8005952:	da0b      	bge.n	800596c <USBD_StdEPReq+0x234>
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	3310      	adds	r3, #16
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	4413      	add	r3, r2
 8005968:	3304      	adds	r3, #4
 800596a:	e00b      	b.n	8005984 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	3304      	adds	r3, #4
 8005984:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <USBD_StdEPReq+0x25a>
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	2b80      	cmp	r3, #128	; 0x80
 8005990:	d103      	bne.n	800599a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e00e      	b.n	80059b8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fede 	bl	8006760 <USBD_LL_IsStallEP>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	e002      	b.n	80059b8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2202      	movs	r2, #2
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fb92 	bl	80060e8 <USBD_CtlSendData>
              break;
 80059c4:	e004      	b.n	80059d0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fb23 	bl	8006014 <USBD_CtlError>
              break;
 80059ce:	bf00      	nop
          }
          break;
 80059d0:	e004      	b.n	80059dc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fb1d 	bl	8006014 <USBD_CtlError>
          break;
 80059da:	bf00      	nop
      }
      break;
 80059dc:	e004      	b.n	80059e8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fb17 	bl	8006014 <USBD_CtlError>
      break;
 80059e6:	bf00      	nop
  }

  return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	885b      	ldrh	r3, [r3, #2]
 8005a0e:	0a1b      	lsrs	r3, r3, #8
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	f200 8128 	bhi.w	8005c6a <USBD_GetDescriptor+0x276>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBD_GetDescriptor+0x2c>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005a55 	.word	0x08005a55
 8005a28:	08005a95 	.word	0x08005a95
 8005a2c:	08005c6b 	.word	0x08005c6b
 8005a30:	08005c6b 	.word	0x08005c6b
 8005a34:	08005c0b 	.word	0x08005c0b
 8005a38:	08005c37 	.word	0x08005c37
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	7c12      	ldrb	r2, [r2, #16]
 8005a48:	f107 0108 	add.w	r1, r7, #8
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	4798      	blx	r3
 8005a50:	60f8      	str	r0, [r7, #12]
      break;
 8005a52:	e112      	b.n	8005c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	7c1b      	ldrb	r3, [r3, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10d      	bne.n	8005a78 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	f107 0208 	add.w	r2, r7, #8
 8005a68:	4610      	mov	r0, r2
 8005a6a:	4798      	blx	r3
 8005a6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	2202      	movs	r2, #2
 8005a74:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a76:	e100      	b.n	8005c7a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	f107 0208 	add.w	r2, r7, #8
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
      break;
 8005a92:	e0f2      	b.n	8005c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	885b      	ldrh	r3, [r3, #2]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	f200 80ac 	bhi.w	8005bf8 <USBD_GetDescriptor+0x204>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <USBD_GetDescriptor+0xb4>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005af5 	.word	0x08005af5
 8005ab0:	08005b29 	.word	0x08005b29
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b91 	.word	0x08005b91
 8005abc:	08005bc5 	.word	0x08005bc5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	7c12      	ldrb	r2, [r2, #16]
 8005ad8:	f107 0108 	add.w	r1, r7, #8
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
 8005ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ae2:	e091      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa94 	bl	8006014 <USBD_CtlError>
            err++;
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	3301      	adds	r3, #1
 8005af0:	72fb      	strb	r3, [r7, #11]
          break;
 8005af2:	e089      	b.n	8005c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	7c12      	ldrb	r2, [r2, #16]
 8005b0c:	f107 0108 	add.w	r1, r7, #8
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b16:	e077      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa7a 	bl	8006014 <USBD_CtlError>
            err++;
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	3301      	adds	r3, #1
 8005b24:	72fb      	strb	r3, [r7, #11]
          break;
 8005b26:	e06f      	b.n	8005c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00b      	beq.n	8005b4c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	7c12      	ldrb	r2, [r2, #16]
 8005b40:	f107 0108 	add.w	r1, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b4a:	e05d      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b4c:	6839      	ldr	r1, [r7, #0]
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa60 	bl	8006014 <USBD_CtlError>
            err++;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	3301      	adds	r3, #1
 8005b58:	72fb      	strb	r3, [r7, #11]
          break;
 8005b5a:	e055      	b.n	8005c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	7c12      	ldrb	r2, [r2, #16]
 8005b74:	f107 0108 	add.w	r1, r7, #8
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
 8005b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b7e:	e043      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b80:	6839      	ldr	r1, [r7, #0]
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 fa46 	bl	8006014 <USBD_CtlError>
            err++;
 8005b88:	7afb      	ldrb	r3, [r7, #11]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b8e:	e03b      	b.n	8005c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00b      	beq.n	8005bb4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	7c12      	ldrb	r2, [r2, #16]
 8005ba8:	f107 0108 	add.w	r1, r7, #8
 8005bac:	4610      	mov	r0, r2
 8005bae:	4798      	blx	r3
 8005bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bb2:	e029      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa2c 	bl	8006014 <USBD_CtlError>
            err++;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005bc2:	e021      	b.n	8005c08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	7c12      	ldrb	r2, [r2, #16]
 8005bdc:	f107 0108 	add.w	r1, r7, #8
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005be6:	e00f      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa12 	bl	8006014 <USBD_CtlError>
            err++;
 8005bf0:	7afb      	ldrb	r3, [r7, #11]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bf6:	e007      	b.n	8005c08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa0a 	bl	8006014 <USBD_CtlError>
          err++;
 8005c00:	7afb      	ldrb	r3, [r7, #11]
 8005c02:	3301      	adds	r3, #1
 8005c04:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005c06:	e038      	b.n	8005c7a <USBD_GetDescriptor+0x286>
 8005c08:	e037      	b.n	8005c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	7c1b      	ldrb	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c1a:	f107 0208 	add.w	r2, r7, #8
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4798      	blx	r3
 8005c22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c24:	e029      	b.n	8005c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9f3 	bl	8006014 <USBD_CtlError>
        err++;
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	3301      	adds	r3, #1
 8005c32:	72fb      	strb	r3, [r7, #11]
      break;
 8005c34:	e021      	b.n	8005c7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	7c1b      	ldrb	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f107 0208 	add.w	r2, r7, #8
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4798      	blx	r3
 8005c4e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	2207      	movs	r2, #7
 8005c56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c58:	e00f      	b.n	8005c7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f9d9 	bl	8006014 <USBD_CtlError>
        err++;
 8005c62:	7afb      	ldrb	r3, [r7, #11]
 8005c64:	3301      	adds	r3, #1
 8005c66:	72fb      	strb	r3, [r7, #11]
      break;
 8005c68:	e007      	b.n	8005c7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f9d1 	bl	8006014 <USBD_CtlError>
      err++;
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	3301      	adds	r3, #1
 8005c76:	72fb      	strb	r3, [r7, #11]
      break;
 8005c78:	bf00      	nop
  }

  if (err != 0U)
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d11c      	bne.n	8005cba <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c80:	893b      	ldrh	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d011      	beq.n	8005caa <USBD_GetDescriptor+0x2b6>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	88db      	ldrh	r3, [r3, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00d      	beq.n	8005caa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	88da      	ldrh	r2, [r3, #6]
 8005c92:	893b      	ldrh	r3, [r7, #8]
 8005c94:	4293      	cmp	r3, r2
 8005c96:	bf28      	it	cs
 8005c98:	4613      	movcs	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c9e:	893b      	ldrh	r3, [r7, #8]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa1f 	bl	80060e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	88db      	ldrh	r3, [r3, #6]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d104      	bne.n	8005cbc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa58 	bl	8006168 <USBD_CtlSendStatus>
 8005cb8:	e000      	b.n	8005cbc <USBD_GetDescriptor+0x2c8>
    return;
 8005cba:	bf00      	nop
    }
  }
}
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop

08005cc4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	889b      	ldrh	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d130      	bne.n	8005d38 <USBD_SetAddress+0x74>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	88db      	ldrh	r3, [r3, #6]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d12c      	bne.n	8005d38 <USBD_SetAddress+0x74>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	885b      	ldrh	r3, [r3, #2]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d828      	bhi.n	8005d38 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	885b      	ldrh	r3, [r3, #2]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d104      	bne.n	8005d06 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f988 	bl	8006014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d04:	e01c      	b.n	8005d40 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7bfa      	ldrb	r2, [r7, #15]
 8005d0a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fd49 	bl	80067aa <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa25 	bl	8006168 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d2c:	e008      	b.n	8005d40 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	e003      	b.n	8005d40 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d38:	6839      	ldr	r1, [r7, #0]
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f96a 	bl	8006014 <USBD_CtlError>
  }
}
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	885b      	ldrh	r3, [r3, #2]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	4b41      	ldr	r3, [pc, #260]	; (8005e60 <USBD_SetConfig+0x118>)
 8005d5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <USBD_SetConfig+0x118>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d904      	bls.n	8005d6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d64:	6839      	ldr	r1, [r7, #0]
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f954 	bl	8006014 <USBD_CtlError>
 8005d6c:	e075      	b.n	8005e5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d002      	beq.n	8005d7e <USBD_SetConfig+0x36>
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d023      	beq.n	8005dc4 <USBD_SetConfig+0x7c>
 8005d7c:	e062      	b.n	8005e44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d7e:	4b38      	ldr	r3, [pc, #224]	; (8005e60 <USBD_SetConfig+0x118>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01a      	beq.n	8005dbc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <USBD_SetConfig+0x118>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2203      	movs	r2, #3
 8005d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d98:	4b31      	ldr	r3, [pc, #196]	; (8005e60 <USBD_SetConfig+0x118>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff f9f4 	bl	800518c <USBD_SetClassConfig>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d104      	bne.n	8005db4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f931 	bl	8006014 <USBD_CtlError>
            return;
 8005db2:	e052      	b.n	8005e5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f9d7 	bl	8006168 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dba:	e04e      	b.n	8005e5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9d3 	bl	8006168 <USBD_CtlSendStatus>
        break;
 8005dc2:	e04a      	b.n	8005e5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005dc4:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <USBD_SetConfig+0x118>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d112      	bne.n	8005df2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <USBD_SetConfig+0x118>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <USBD_SetConfig+0x118>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff f9f0 	bl	80051ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f9bc 	bl	8006168 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005df0:	e033      	b.n	8005e5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <USBD_SetConfig+0x118>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d01d      	beq.n	8005e3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff f9de 	bl	80051ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <USBD_SetConfig+0x118>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <USBD_SetConfig+0x118>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff f9b4 	bl	800518c <USBD_SetClassConfig>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d104      	bne.n	8005e34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 f8f1 	bl	8006014 <USBD_CtlError>
            return;
 8005e32:	e012      	b.n	8005e5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f997 	bl	8006168 <USBD_CtlSendStatus>
        break;
 8005e3a:	e00e      	b.n	8005e5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f993 	bl	8006168 <USBD_CtlSendStatus>
        break;
 8005e42:	e00a      	b.n	8005e5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8e4 	bl	8006014 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e4c:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <USBD_SetConfig+0x118>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7ff f9b9 	bl	80051ca <USBD_ClrClassConfig>
        break;
 8005e58:	bf00      	nop
    }
  }
}
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000184 	.word	0x20000184

08005e64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	88db      	ldrh	r3, [r3, #6]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d004      	beq.n	8005e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8cb 	bl	8006014 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e7e:	e021      	b.n	8005ec4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	db17      	blt.n	8005eba <USBD_GetConfig+0x56>
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	dd02      	ble.n	8005e94 <USBD_GetConfig+0x30>
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d00b      	beq.n	8005eaa <USBD_GetConfig+0x46>
 8005e92:	e012      	b.n	8005eba <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f920 	bl	80060e8 <USBD_CtlSendData>
        break;
 8005ea8:	e00c      	b.n	8005ec4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3304      	adds	r3, #4
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f918 	bl	80060e8 <USBD_CtlSendData>
        break;
 8005eb8:	e004      	b.n	8005ec4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f8a9 	bl	8006014 <USBD_CtlError>
        break;
 8005ec2:	bf00      	nop
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005edc:	3b01      	subs	r3, #1
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d81e      	bhi.n	8005f20 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	88db      	ldrh	r3, [r3, #6]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d004      	beq.n	8005ef4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005eea:	6839      	ldr	r1, [r7, #0]
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f891 	bl	8006014 <USBD_CtlError>
        break;
 8005ef2:	e01a      	b.n	8005f2a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f043 0202 	orr.w	r2, r3, #2
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	330c      	adds	r3, #12
 8005f14:	2202      	movs	r2, #2
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8e5 	bl	80060e8 <USBD_CtlSendData>
      break;
 8005f1e:	e004      	b.n	8005f2a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f876 	bl	8006014 <USBD_CtlError>
      break;
 8005f28:	bf00      	nop
  }
}
 8005f2a:	bf00      	nop
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	885b      	ldrh	r3, [r3, #2]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d106      	bne.n	8005f52 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f90b 	bl	8006168 <USBD_CtlSendStatus>
  }
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d80b      	bhi.n	8005f88 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	885b      	ldrh	r3, [r3, #2]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d10c      	bne.n	8005f92 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8f1 	bl	8006168 <USBD_CtlSendStatus>
      }
      break;
 8005f86:	e004      	b.n	8005f92 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f842 	bl	8006014 <USBD_CtlError>
      break;
 8005f90:	e000      	b.n	8005f94 <USBD_ClrFeature+0x3a>
      break;
 8005f92:	bf00      	nop
  }
}
 8005f94:	bf00      	nop
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	781a      	ldrb	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	785a      	ldrb	r2, [r3, #1]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	3302      	adds	r3, #2
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4413      	add	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	3305      	adds	r3, #5
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	3306      	adds	r3, #6
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	3307      	adds	r3, #7
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	b29b      	uxth	r3, r3
 8006002:	4413      	add	r3, r2
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	80da      	strh	r2, [r3, #6]

}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb5f 	bl	80066e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006026:	2100      	movs	r1, #0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb5b 	bl	80066e4 <USBD_LL_StallEP>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d032      	beq.n	80060b2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f834 	bl	80060ba <USBD_GetLen>
 8006052:	4603      	mov	r3, r0
 8006054:	3301      	adds	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006060:	7dfb      	ldrb	r3, [r7, #23]
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	75fa      	strb	r2, [r7, #23]
 8006066:	461a      	mov	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4413      	add	r3, r2
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	7812      	ldrb	r2, [r2, #0]
 8006070:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	75fa      	strb	r2, [r7, #23]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4413      	add	r3, r2
 800607e:	2203      	movs	r2, #3
 8006080:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006082:	e012      	b.n	80060aa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	60fa      	str	r2, [r7, #12]
 800608a:	7dfa      	ldrb	r2, [r7, #23]
 800608c:	1c51      	adds	r1, r2, #1
 800608e:	75f9      	strb	r1, [r7, #23]
 8006090:	4611      	mov	r1, r2
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	440a      	add	r2, r1
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	75fa      	strb	r2, [r7, #23]
 80060a0:	461a      	mov	r2, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4413      	add	r3, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e8      	bne.n	8006084 <USBD_GetString+0x4e>
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80060c6:	e005      	b.n	80060d4 <USBD_GetLen+0x1a>
  {
    len++;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	3301      	adds	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3301      	adds	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f5      	bne.n	80060c8 <USBD_GetLen+0xe>
  }

  return len;
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	4613      	mov	r3, r2
 80060f4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006104:	88fa      	ldrh	r2, [r7, #6]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	2100      	movs	r1, #0
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fb69 	bl	80067e8 <USBD_LL_Transmit>

  return USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	4613      	mov	r3, r2
 800612c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	2100      	movs	r1, #0
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fb57 	bl	80067e8 <USBD_LL_Transmit>

  return USBD_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	2100      	movs	r1, #0
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 fb68 	bl	800682e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2204      	movs	r2, #4
 8006174:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006178:	2300      	movs	r3, #0
 800617a:	2200      	movs	r2, #0
 800617c:	2100      	movs	r1, #0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fb32 	bl	80067e8 <USBD_LL_Transmit>

  return USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2205      	movs	r2, #5
 800619a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb42 	bl	800682e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061b8:	2200      	movs	r2, #0
 80061ba:	490e      	ldr	r1, [pc, #56]	; (80061f4 <MX_USB_DEVICE_Init+0x40>)
 80061bc:	480e      	ldr	r0, [pc, #56]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061be:	f7fe ff8b 	bl	80050d8 <USBD_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061c8:	f7fa f9ee 	bl	80005a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80061cc:	490b      	ldr	r1, [pc, #44]	; (80061fc <MX_USB_DEVICE_Init+0x48>)
 80061ce:	480a      	ldr	r0, [pc, #40]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061d0:	f7fe ffad 	bl	800512e <USBD_RegisterClass>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061da:	f7fa f9e5 	bl	80005a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061de:	4806      	ldr	r0, [pc, #24]	; (80061f8 <MX_USB_DEVICE_Init+0x44>)
 80061e0:	f7fe ffbe 	bl	8005160 <USBD_Start>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80061ea:	f7fa f9dd 	bl	80005a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061ee:	bf00      	nop
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000114 	.word	0x20000114
 80061f8:	20000290 	.word	0x20000290
 80061fc:	2000000c 	.word	0x2000000c

08006200 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2212      	movs	r2, #18
 8006210:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006212:	4b03      	ldr	r3, [pc, #12]	; (8006220 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	bc80      	pop	{r7}
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000130 	.word	0x20000130

08006224 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2204      	movs	r2, #4
 8006234:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000144 	.word	0x20000144

08006248 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
 800625e:	4808      	ldr	r0, [pc, #32]	; (8006280 <USBD_FS_ProductStrDescriptor+0x38>)
 8006260:	f7ff fee9 	bl	8006036 <USBD_GetString>
 8006264:	e004      	b.n	8006270 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4904      	ldr	r1, [pc, #16]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
 800626a:	4805      	ldr	r0, [pc, #20]	; (8006280 <USBD_FS_ProductStrDescriptor+0x38>)
 800626c:	f7ff fee3 	bl	8006036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006272:	4618      	mov	r0, r3
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000554 	.word	0x20000554
 8006280:	08006990 	.word	0x08006990

08006284 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4904      	ldr	r1, [pc, #16]	; (80062a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006294:	4804      	ldr	r0, [pc, #16]	; (80062a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006296:	f7ff fece 	bl	8006036 <USBD_GetString>
  return USBD_StrDesc;
 800629a:	4b02      	ldr	r3, [pc, #8]	; (80062a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000554 	.word	0x20000554
 80062a8:	080069a8 	.word	0x080069a8

080062ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	221a      	movs	r2, #26
 80062bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062be:	f000 f843 	bl	8006348 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062c2:	4b02      	ldr	r3, [pc, #8]	; (80062cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000148 	.word	0x20000148

080062d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	4907      	ldr	r1, [pc, #28]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062e6:	4808      	ldr	r0, [pc, #32]	; (8006308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80062e8:	f7ff fea5 	bl	8006036 <USBD_GetString>
 80062ec:	e004      	b.n	80062f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	4904      	ldr	r1, [pc, #16]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
 80062f2:	4805      	ldr	r0, [pc, #20]	; (8006308 <USBD_FS_ConfigStrDescriptor+0x38>)
 80062f4:	f7ff fe9f 	bl	8006036 <USBD_GetString>
  }
  return USBD_StrDesc;
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000554 	.word	0x20000554
 8006308:	080069bc 	.word	0x080069bc

0800630c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	6039      	str	r1, [r7, #0]
 8006316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	4907      	ldr	r1, [pc, #28]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006322:	4808      	ldr	r0, [pc, #32]	; (8006344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006324:	f7ff fe87 	bl	8006036 <USBD_GetString>
 8006328:	e004      	b.n	8006334 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	4904      	ldr	r1, [pc, #16]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800632e:	4805      	ldr	r0, [pc, #20]	; (8006344 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006330:	f7ff fe81 	bl	8006036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000554 	.word	0x20000554
 8006344:	080069c8 	.word	0x080069c8

08006348 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800634e:	4b0f      	ldr	r3, [pc, #60]	; (800638c <Get_SerialNum+0x44>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <Get_SerialNum+0x48>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <Get_SerialNum+0x4c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800636e:	2208      	movs	r2, #8
 8006370:	4909      	ldr	r1, [pc, #36]	; (8006398 <Get_SerialNum+0x50>)
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f814 	bl	80063a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006378:	2204      	movs	r2, #4
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <Get_SerialNum+0x54>)
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f000 f80f 	bl	80063a0 <IntToUnicode>
  }
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	1ffff7e8 	.word	0x1ffff7e8
 8006390:	1ffff7ec 	.word	0x1ffff7ec
 8006394:	1ffff7f0 	.word	0x1ffff7f0
 8006398:	2000014a 	.word	0x2000014a
 800639c:	2000015a 	.word	0x2000015a

080063a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	4613      	mov	r3, r2
 80063ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	e027      	b.n	8006408 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	0f1b      	lsrs	r3, r3, #28
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d80b      	bhi.n	80063d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	0f1b      	lsrs	r3, r3, #28
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4619      	mov	r1, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	440b      	add	r3, r1
 80063d0:	3230      	adds	r2, #48	; 0x30
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	e00a      	b.n	80063ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	0f1b      	lsrs	r3, r3, #28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4619      	mov	r1, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	440b      	add	r3, r1
 80063e8:	3237      	adds	r2, #55	; 0x37
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	3301      	adds	r3, #1
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4413      	add	r3, r2
 80063fe:	2200      	movs	r2, #0
 8006400:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	3301      	adds	r3, #1
 8006406:	75fb      	strb	r3, [r7, #23]
 8006408:	7dfa      	ldrb	r2, [r7, #23]
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	429a      	cmp	r2, r3
 800640e:	d3d3      	bcc.n	80063b8 <IntToUnicode+0x18>
  }
}
 8006410:	bf00      	nop
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
	...

0800641c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a0d      	ldr	r2, [pc, #52]	; (8006460 <HAL_PCD_MspInit+0x44>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d113      	bne.n	8006456 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800642e:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <HAL_PCD_MspInit+0x48>)
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_PCD_MspInit+0x48>)
 8006434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006438:	61d3      	str	r3, [r2, #28]
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_PCD_MspInit+0x48>)
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	2014      	movs	r0, #20
 800644c:	f7fb f8e5 	bl	800161a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8006450:	2014      	movs	r0, #20
 8006452:	f7fb f8fe 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40005c00 	.word	0x40005c00
 8006464:	40021000 	.word	0x40021000

08006468 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fe feb6 	bl	80051f0 <USBD_LL_SetupStage>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800649e:	78fb      	ldrb	r3, [r7, #3]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	015b      	lsls	r3, r3, #5
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	78fb      	ldrb	r3, [r7, #3]
 80064ae:	4619      	mov	r1, r3
 80064b0:	f7fe fee9 	bl	8005286 <USBD_LL_DataOutStage>
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	015b      	lsls	r3, r3, #5
 80064d4:	4413      	add	r3, r2
 80064d6:	333c      	adds	r3, #60	; 0x3c
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	4619      	mov	r1, r3
 80064de:	f7fe ff43 	bl	8005368 <USBD_LL_DataInStage>
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff f853 	bl	80055a4 <USBD_LL_SOF>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d001      	beq.n	800651e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800651a:	f7fa f845 	bl	80005a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006524:	7bfa      	ldrb	r2, [r7, #15]
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f803 	bl	8005534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006534:	4618      	mov	r0, r3
 8006536:	f7fe ffbc 	bl	80054b2 <USBD_LL_Reset>
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fffd 	bl	8005552 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <HAL_PCD_SuspendCallback+0x30>)
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	4a03      	ldr	r2, [pc, #12]	; (8006574 <HAL_PCD_SuspendCallback+0x30>)
 8006566:	f043 0306 	orr.w	r3, r3, #6
 800656a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed00 	.word	0xe000ed00

08006578 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe fff7 	bl	800557a <USBD_LL_Resume>
}
 800658c:	bf00      	nop
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800659c:	4a1f      	ldr	r2, [pc, #124]	; (800661c <USBD_LL_Init+0x88>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a1d      	ldr	r2, [pc, #116]	; (800661c <USBD_LL_Init+0x88>)
 80065a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80065ac:	4b1b      	ldr	r3, [pc, #108]	; (800661c <USBD_LL_Init+0x88>)
 80065ae:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <USBD_LL_Init+0x8c>)
 80065b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80065b2:	4b1a      	ldr	r3, [pc, #104]	; (800661c <USBD_LL_Init+0x88>)
 80065b4:	2208      	movs	r2, #8
 80065b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80065b8:	4b18      	ldr	r3, [pc, #96]	; (800661c <USBD_LL_Init+0x88>)
 80065ba:	2202      	movs	r2, #2
 80065bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <USBD_LL_Init+0x88>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <USBD_LL_Init+0x88>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80065ca:	4b14      	ldr	r3, [pc, #80]	; (800661c <USBD_LL_Init+0x88>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80065d0:	4812      	ldr	r0, [pc, #72]	; (800661c <USBD_LL_Init+0x88>)
 80065d2:	f7fb f9c3 	bl	800195c <HAL_PCD_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80065dc:	f7f9 ffe4 	bl	80005a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065e6:	2318      	movs	r3, #24
 80065e8:	2200      	movs	r2, #0
 80065ea:	2100      	movs	r1, #0
 80065ec:	f7fc f848 	bl	8002680 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80065f6:	2358      	movs	r3, #88	; 0x58
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	; 0x80
 80065fc:	f7fc f840 	bl	8002680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800660a:	2200      	movs	r2, #0
 800660c:	2181      	movs	r1, #129	; 0x81
 800660e:	f7fc f837 	bl	8002680 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000754 	.word	0x20000754
 8006620:	40005c00 	.word	0x40005c00

08006624 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800663a:	4618      	mov	r0, r3
 800663c:	f7fb fa6f 	bl	8001b1e <HAL_PCD_Start>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 f934 	bl	80068b4 <USBD_Get_USB_Status>
 800664c:	4603      	mov	r3, r0
 800664e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006650:	7bbb      	ldrb	r3, [r7, #14]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	461a      	mov	r2, r3
 8006668:	4603      	mov	r3, r0
 800666a:	70fb      	strb	r3, [r7, #3]
 800666c:	460b      	mov	r3, r1
 800666e:	70bb      	strb	r3, [r7, #2]
 8006670:	4613      	mov	r3, r2
 8006672:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006682:	78bb      	ldrb	r3, [r7, #2]
 8006684:	883a      	ldrh	r2, [r7, #0]
 8006686:	78f9      	ldrb	r1, [r7, #3]
 8006688:	f7fb fba2 	bl	8001dd0 <HAL_PCD_EP_Open>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f90e 	bl	80068b4 <USBD_Get_USB_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800669c:	7bbb      	ldrb	r3, [r7, #14]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fb fbe3 	bl	8001e90 <HAL_PCD_EP_Close>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f8ef 	bl	80068b4 <USBD_Get_USB_Status>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80066da:	7bbb      	ldrb	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4611      	mov	r1, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fc79 	bl	8001ffa <HAL_PCD_EP_SetStall>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f8d0 	bl	80068b4 <USBD_Get_USB_Status>
 8006714:	4603      	mov	r3, r0
 8006716:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006718:	7bbb      	ldrb	r3, [r7, #14]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006732:	2300      	movs	r3, #0
 8006734:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800673c:	78fa      	ldrb	r2, [r7, #3]
 800673e:	4611      	mov	r1, r2
 8006740:	4618      	mov	r0, r3
 8006742:	f7fb fcb4 	bl	80020ae <HAL_PCD_EP_ClrStall>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	4618      	mov	r0, r3
 800674e:	f000 f8b1 	bl	80068b4 <USBD_Get_USB_Status>
 8006752:	4603      	mov	r3, r0
 8006754:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006756:	7bbb      	ldrb	r3, [r7, #14]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	460b      	mov	r3, r1
 800676a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006772:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006778:	2b00      	cmp	r3, #0
 800677a:	da08      	bge.n	800678e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	015b      	lsls	r3, r3, #5
 8006786:	4413      	add	r3, r2
 8006788:	332a      	adds	r3, #42	; 0x2a
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	e008      	b.n	80067a0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	015b      	lsls	r3, r3, #5
 8006798:	4413      	add	r3, r2
 800679a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800679e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fb fadc 	bl	8001d86 <HAL_PCD_SetAddress>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 f86d 	bl	80068b4 <USBD_Get_USB_Status>
 80067da:	4603      	mov	r3, r0
 80067dc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80067de:	7bbb      	ldrb	r3, [r7, #14]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	607a      	str	r2, [r7, #4]
 80067f2:	461a      	mov	r2, r3
 80067f4:	460b      	mov	r3, r1
 80067f6:	72fb      	strb	r3, [r7, #11]
 80067f8:	4613      	mov	r3, r2
 80067fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	7af9      	ldrb	r1, [r7, #11]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	f7fb fbba 	bl	8001f88 <HAL_PCD_EP_Transmit>
 8006814:	4603      	mov	r3, r0
 8006816:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006818:	7dfb      	ldrb	r3, [r7, #23]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f84a 	bl	80068b4 <USBD_Get_USB_Status>
 8006820:	4603      	mov	r3, r0
 8006822:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8006824:	7dbb      	ldrb	r3, [r7, #22]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	461a      	mov	r2, r3
 800683a:	460b      	mov	r3, r1
 800683c:	72fb      	strb	r3, [r7, #11]
 800683e:	4613      	mov	r3, r2
 8006840:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006850:	893b      	ldrh	r3, [r7, #8]
 8006852:	7af9      	ldrb	r1, [r7, #11]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	f7fb fb5d 	bl	8001f14 <HAL_PCD_EP_Receive>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f827 	bl	80068b4 <USBD_Get_USB_Status>
 8006866:	4603      	mov	r3, r0
 8006868:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800686a:	7dbb      	ldrb	r3, [r7, #22]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <USBD_static_malloc+0x14>)
}
 800687e:	4618      	mov	r0, r3
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr
 8006888:	20000188 	.word	0x20000188

0800688c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d817      	bhi.n	80068f8 <USBD_Get_USB_Status+0x44>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <USBD_Get_USB_Status+0x1c>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	080068e7 	.word	0x080068e7
 80068d8:	080068ed 	.word	0x080068ed
 80068dc:	080068f3 	.word	0x080068f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
    break;
 80068e4:	e00b      	b.n	80068fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80068e6:	2302      	movs	r3, #2
 80068e8:	73fb      	strb	r3, [r7, #15]
    break;
 80068ea:	e008      	b.n	80068fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]
    break;
 80068f0:	e005      	b.n	80068fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068f2:	2302      	movs	r3, #2
 80068f4:	73fb      	strb	r3, [r7, #15]
    break;
 80068f6:	e002      	b.n	80068fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068f8:	2302      	movs	r3, #2
 80068fa:	73fb      	strb	r3, [r7, #15]
    break;
 80068fc:	bf00      	nop
  }
  return usb_status;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop

0800690c <__libc_init_array>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	2500      	movs	r5, #0
 8006910:	4e0c      	ldr	r6, [pc, #48]	; (8006944 <__libc_init_array+0x38>)
 8006912:	4c0d      	ldr	r4, [pc, #52]	; (8006948 <__libc_init_array+0x3c>)
 8006914:	1ba4      	subs	r4, r4, r6
 8006916:	10a4      	asrs	r4, r4, #2
 8006918:	42a5      	cmp	r5, r4
 800691a:	d109      	bne.n	8006930 <__libc_init_array+0x24>
 800691c:	f000 f822 	bl	8006964 <_init>
 8006920:	2500      	movs	r5, #0
 8006922:	4e0a      	ldr	r6, [pc, #40]	; (800694c <__libc_init_array+0x40>)
 8006924:	4c0a      	ldr	r4, [pc, #40]	; (8006950 <__libc_init_array+0x44>)
 8006926:	1ba4      	subs	r4, r4, r6
 8006928:	10a4      	asrs	r4, r4, #2
 800692a:	42a5      	cmp	r5, r4
 800692c:	d105      	bne.n	800693a <__libc_init_array+0x2e>
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006934:	4798      	blx	r3
 8006936:	3501      	adds	r5, #1
 8006938:	e7ee      	b.n	8006918 <__libc_init_array+0xc>
 800693a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800693e:	4798      	blx	r3
 8006940:	3501      	adds	r5, #1
 8006942:	e7f2      	b.n	800692a <__libc_init_array+0x1e>
 8006944:	080069f0 	.word	0x080069f0
 8006948:	080069f0 	.word	0x080069f0
 800694c:	080069f0 	.word	0x080069f0
 8006950:	080069f4 	.word	0x080069f4

08006954 <memset>:
 8006954:	4603      	mov	r3, r0
 8006956:	4402      	add	r2, r0
 8006958:	4293      	cmp	r3, r2
 800695a:	d100      	bne.n	800695e <memset+0xa>
 800695c:	4770      	bx	lr
 800695e:	f803 1b01 	strb.w	r1, [r3], #1
 8006962:	e7f9      	b.n	8006958 <memset+0x4>

08006964 <_init>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	bf00      	nop
 8006968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696a:	bc08      	pop	{r3}
 800696c:	469e      	mov	lr, r3
 800696e:	4770      	bx	lr

08006970 <_fini>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr
